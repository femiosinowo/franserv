
define(['require', 'module'], function (require, module) {
    function convertURIBase(uri, fromBase, toBase) { if (uri.match(/^\/|([^\:\/]*:)/)) return uri; return relativeURI(absoluteURI(uri, fromBase), toBase); }; function absoluteURI(uri, base) {
        if (uri.substr(0, 2) == './') uri = uri.substr(2); var baseParts = base.split('/'); var uriParts = uri.split('/'); baseParts.pop(); while (curPart = uriParts.shift()) if (curPart == '..') baseParts.pop(); else
            baseParts.push(curPart); return baseParts.join('/');
    }; function relativeURI(uri, base) { var baseParts = base.split('/'); baseParts.pop(); base = baseParts.join('/') + '/'; i = 0; while (base.substr(i, 1) == uri.substr(i, 1)) i++; while (base.substr(i, 1) != '/') i--; base = base.substr(i + 1); uri = uri.substr(i + 1); baseParts = base.split('/'); var uriParts = uri.split('/'); out = ''; while (baseParts.shift()) out += '../'; while (curPart = uriParts.shift()) out += curPart + '/'; return out.substr(0, out.length - 1); }; var normalizeCSS = function (source, fromBase, toBase) { var urlRegEx = /(url\(\s*"(.*)"\s*\))|(url\(\s*'(.*)'\s*\))|(url\(\s*(.*)\s*\))/g; var result, url, source; while (result = urlRegEx.exec(source)) { url = convertURIBase(result[2] || result[4] || result[6], fromBase, toBase); source = source.replace(result[2] || result[4] || result[6], url); } var importRegEx = /(@import\s*'(.*)')|(@import\s*"(.*)")/g; while (result = importRegEx.exec(source)) { url = convertURIBase(result[2] || result[4], fromBase, toBase); source = source.replace(result[2] || result[4], url); } return source; }; normalizeCSS.convertURIBase = convertURIBase; return normalizeCSS;
});