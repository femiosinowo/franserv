<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ektron.Cms.Framework.UI.Controls.EktronUI</name>
    </assembly>
    <members>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Accordion">
            <summary>
            Accordion class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase">
            <summary>
            Accordion base class 
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.InvalidTypeMessage">
            <summary>
            invalid type message
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.OnInit(System.EventArgs)">
            <summary>
            On init event handler
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.DataBind">
            <summary>
            Called after setting DataSource, to create the data-bound child tab controls.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.BuildDataBoundChildControls">
            <summary>
            Builds the child tab controls, using the contents of the DataSource. 
            Do not call directly, but rather trigger this from DataBind, as other 
            house-keeping tasks must be taken care of.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.GetDataSource">
            <summary>
            Converts the DataSource into a type usable by the BuildDataBoundChildControls method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.OnPreRender(System.EventArgs)">
            <summary>
            On pre prender handler
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render event handler
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.AddParsedSubObject(System.Object)">
            <summary>
            Add parsed sub object
            </summary>
            <param name="obj">object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.AddTab(Ektron.Cms.Framework.UI.Controls.EktronUI.Tab)">
            <summary>
            Provides access to add a tab programatically. Use the Tab controls Text 
            and Content properties to set the tab-text and tab-contents respectively.
            </summary>
            <param name="newTab"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.SetInitializationScript">
            <summary>
            set initialization script
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.CreateControlCollection">
            <summary>
            Create control collection
            </summary>
            <returns>a control collection</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render begin tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render End tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.GetActiveTab">
            <summary>
            Call to obtain the currently selected Tab control.
            </summary>
            <returns>tab control</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.GetActiveTabIndex">
            <summary>
            Provides the active tabs index.
            </summary>
            <returns>the zero-based index of the currently selected tab</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.SetActiveTab(Ektron.Cms.Framework.UI.Controls.EktronUI.Tab)">
            <summary>
            Set active tab, by passing the Tab control that should be selected.
            </summary>
            <param name="tab">tab control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.SetActiveTab(System.Int32)">
            <summary>
            Selects the active tab by the given index.
            </summary>
            <param name="tabIndex">the zero-based index of the tab to select</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.SetActiveTab(System.String)">
            <summary>
            Set active tab by the tab-ID
            </summary>
            <param name="tabText">tab ID</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.ToolTip">
            <summary>
            ToolTip property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.AutoHeight">
            <summary>
            When true, the highest content tab is used as height reference for all other tabs.
            When false, each panel will only as tall as its content.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Collapsible">
            <summary>
            When true, a selected tab may be unselected by clicking on it, causing all tabs to be in a collapsed state.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.HeightStyle">
            <summary>
            Controls the height of the accordion and each panel. Possible values: auto, fill, content
            Default - auto
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Items">
            <summary>
            Provides access to the child Tab controls.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.ActiveTabIndex">
            <summary>
            Allows declaratively setting the zero-based index of the tab to be selected when rendered.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the child tab controls.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionBase.Widget">
            <summary>
            Widget property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Autocomplete">
            <summary>
            Autocomplete class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.Options">
            <summary>
            Gets or sets the available options for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.ClientEvents">
            <summary>
            Gets or sets the client-side events for this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.SourceData">
            <summary>
            Gets or sets the source data for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.ValidationRules">
            <summary>
            Gets or sets the ValidationRules applied to this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.ValidationGroup">
            <summary>
            Gets or sets the the name of the validation group to which this validation control belongs. The default is an empty string, which indicates that this property is not set.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.Text">
            <summary>
            Gets or sets the Text of the control.
            </summary>
            <remarks>
            The text of the control to validate. This will be used for server-side 
            validation upon postback. This is also used to implement the 
            ValidationProperty attribute, which allows ASP.NET validation controls 
            to function. All validatable controls must wire up this property.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.ControlToValidate">
            <summary>
            References the control to be validated, which exists in the template. Used to access its' value, visible-state, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.Container">
            <summary>
            Allows any code that obtains an object that implements IValidatableObject, access to the container control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteBase.LabelableControlID">
            <summary>
            Provides the Control ID for an associated label control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Button">
            <summary>
            Button class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase">
            <summary>
            Button Base class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Handle render event
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.SetInitializationScript">
            <summary>
            override Set Initialization Script
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.RaisePostBackEvent(System.String)">
            <summary>
            Raise post back event
            </summary>
            <param name="eventArgument">event argument string</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.HasServerEvent">
            <summary>
            Has server event property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.PostBackTrigger">
            <summary>
            Has post back trigger property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.OnClientClick">
            <summary>
            Gets or sets the client-side script that executes when a control's Click event is raised.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.Text">
            <summary>
            Gets or sets the text to expose on the buttons surface, to help identify the buttons function to the 
            user. This may be set declaratively in the opening tag Text-property, or between the 
            opening and closing tag, or programatically.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.ToolTip">
            <summary>
            Gets or sets the text for the tooltip/title property to help identify the buttons function to the user. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.IsClickHooked">
            <summary>
            Returns true when a server-side handler has registered for the button controls click event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.CausesValidation">
            <summary>
            Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.Click">
            <summary>
            Click event
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.Command">
            <summary>
            Command Event 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.CommandArgument">
            <summary>
            Gets or sets an optional parameter passed to the Command event along with the associated CommandName.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.CommandName">
            <summary>
            Gets or sets the command name associated with the Button control that is passed to the Command event.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.PostBackUrl">
            <summary>
            Gets or sets the Post Back URL for the button control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.NavigateUrl">
            <summary>
            Gets or sets the Navigate URL for the button control. Only for Anchor type button.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonBase.ValidationGroup">
            <summary>
            Gets or sets the name of the validation group to which this validation control belongs.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.OnInit(System.EventArgs)">
            <summary>
            Handle On Init event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.OnPreRender(System.EventArgs)">
            <summary>
            Handle OnPreRender event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.SetDefaultText">
            <summary>
            Set default text
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.SetInitializationScript">
            <summary>
            Set initialization Script
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.Selector">
            <summary>
            Gets or sets the hierarchial id of the control which can be used in jQuery as a selector.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.PrimaryIcon">
            <summary>
            Gets or Sets the UI Theme Roller for Primary Icon for a given button, which is diaplyed left of the text. Does not apply to type button and submit.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.SecondaryIcon">
            <summary>
            Gets or Sets the UI Theme Roller Secondary Icon for a given button,which is diaplyed right of the text. Does not apply to type button and submit.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.DisplayMode">
            <summary>
            Gets or sets the display type of the following input types Checkbox, radio button, submit and button.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.IsButtonSet">
            <summary>
            Gets boolean value for whether or not the current button is part of a button set.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.CheckableControlUniqueID">
            <summary>
            Sets the container control's Uniqueid as the underlying asp checkbox or asp radiobutton's id if the displaymode of the button control is either radio button or checkbox.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.CheckableControlClientID">
            <summary>
            Sets the container control's Clientid as the underlying asp checkbox or asp radiobutton's id if the displaymode of the button control is either radio button or checkbox.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.Options">
            <summary>
            Gets or sets the available options for the control. Options for this control are Disabled, HasJson, icon, Label and Text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.ClientEvents">
            <summary>
            Gets or sets the client events property for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.Checked">
            <summary>
            Gets of sets the boolean value for the checkbox and radio button.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction. Default Value is true.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode">
            <summary>
            Mark mode enumeration
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode.Anchor">
            <summary>
            Anchor
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode.Checkbox">
            <summary>
            Checkbox
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode.RadioButton">
            <summary>
            Radio button
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Button.MarkupMode.Submit">
            <summary>
            Submit
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.ButtonSet">
            <summary>
            Button Set class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase">
            <summary>
            Button Set base class 
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.InvalidTypeMessage">
            <summary>
            invalid type message string
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.InvalidButtonTypeMessage">
            <summary>
            invalid button type message string
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.OnInit(System.EventArgs)">
            <summary>
            On init event handler
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.OnPreRender(System.EventArgs)">
            <summary>
            On preprender event args
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render event handler
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.AddParsedSubObject(System.Object)">
            <summary>
            Add Parsed sub object
            </summary>
            <param name="obj">object</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render Begin tag
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render ent tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.SetInitializationScript">
            <summary>
            Set initialization script
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.Buttons">
            <summary>
            Gets or sets the button set button collection.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetBase.Orientation">
            <summary>
            Gets or sets the button set's orienation to display either horizontally or vertically.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.BlueprintColumn">
            <summary>
            Blue print column class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.OnPreRender(System.EventArgs)">
            <summary>
            Handle On pre render event
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Handle Render Event
            </summary>
            <param name="writer">html text writer </param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Override Render End Tag
            </summary>
            <param name="writer">Html text write</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.IsLast">
            <summary>
            Gets or sets boolean value. IsLast property needs to be set to true for The last column in a row. Default is false.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Span">
            <summary>
            Gets or sets numeric value which is used to set the width of a column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Append">
            <summary>
            Gets or sets numeric value which is used to append empty columns to a column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Prepend">
            <summary>
            Gets or sets numeric value which is used to prepend empty columns to a column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Push">
            <summary>
            Gets or sets numeric value which is used to push it into the next column, or to pull it into the previous column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Pull">
            <summary>
            Gets or sets numeric value which is used to push it into the next column, or to pull it into the previous column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.ColumnBorder">
            <summary>
            Gets or sets boolean value. Used to add a border with more whitespace, spans one column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Border">
            <summary>
            Gets or sets boolean value. When set to true it shows a border on the right hand side of a column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintColumnBase.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Captcha">
            <summary>
            Captcha class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase">
            <summary>
            Captcha Base class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.InputBase`3.ValidationGroup">
            <summary>
            Gets or sets the the name of the validation group to which this validation control belongs. The default is an empty string, which indicates that this property is not set.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.InputBase`3.Text">
            <summary>
            Gets or sets the Text of the control.
            </summary>
            <remarks>
            The text of the control to validate. This will be used for server-side 
            validation upon postback. This is also used to implement the 
            ValidationProperty attribute, which allows ASP.NET validation controls 
            to function. All validatable controls must wire up this property.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.InputBase`3.Container">
            <summary>
            Allows any code that obtains an object that implements IValidatableObject, access to the container control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.InputBase`3.Value">
            <summary>
            strongly typed value accessor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.OnInit(System.EventArgs)">
            <summary>
            Handle On Init event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the output of the control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.OnPreRender(System.EventArgs)">
            <summary>
            Handle OnPreRender event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render begin tag
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render end tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.DefaultCaptchaRule">
            <summary>
            Add the custom rule as default rule for captcha.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.GetLocalizedText(System.String)">
            <summary>
            Gets the text for UI buttons based on the user culture from the resource file.
            </summary>
            <param name="key">key value</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.ReadValueFromResourceFile(System.String,System.String)">
            <summary>
            Read the string from the resource file based on key name.
            </summary>
            <param name="resourceFileName">Resource File Name</param>
            <param name="key">Key name.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.SetInitializationScript">
            <summary>
            Register the script for Help Icon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.BackgroundColor">
            <summary>
            Gets or sets the BackgroundColor for the Captcha image.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.CodeLength">
            <summary>
            Gets or sets the CodeLength for the Captcha Image text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.CodeType">
            <summary>
            Gets or sets the captcha code type.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.ErrorMessage">
            <summary>
            Gets or Sets the error message for incorrect captcha value.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.ForegroundColor">
            <summary>
            Gets or sets the FontColor for the Captcha image.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.FontFamily">
            <summary>
            Gets or sets the FontFamily for the Captcha image.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.HelpUrl">
            <summary>
            Gets or sets the HelpUrl for the help icon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Text">
            <summary>
            Gets or sets the default text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.DefaultTemplate">
            <summary>
             Gets the name of the Default Template used for rendering the TextField control.
            </summary>                   
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Value">
            <summary>
            strongly typed value accessor
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.AlternateText">
            <summary>
            Gets the localized Alt text
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.MismatchErrorMessage">
            <summary>
            Gets the localized Alt text
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.HelpToolTip">
            <summary>
            Gets the localized tooltip for help icon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.RefreshToolTip">
            <summary>
            Gets the localized tooltip for refresh icon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Title">
            <summary>
            Gets the localized Title text.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.SpeakerToolTip">
            <summary>
            Gets the localized tooltip for speech text icon.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.HandlerPath">
            <summary>
            Gets the path the handler used for generate captcha image.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Selector">
            <summary>
            Gets and Sets the selector of the control
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaBase.Visible">
            <summary>
            Gets or Sets the visiblilty of the control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase">
            <summary>
            ContextMenuBase
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase"/> class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.OnNodeCreated(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs)">
            <summary>
            Raises the <see cref="F:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.NodeCreatedEvent"/> event.
            </summary>
            <param name="e">The <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.OnNodeDataBound(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs)">
            <summary>
            Raises the <see cref="F:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.NodeDataBoundEvent"/> event.
            </summary>
            <param name="e">The <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.LateDataBound">
            <summary>
            Lates the data bound.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.OnInit(System.EventArgs)">
            <summary>
            Override the init-event; ensure Templates are set.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.OnLoad(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.EnsureChildControls">
            <summary>
            Determines whether the server control contains child controls. If it does not, it creates child controls.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.CreateChildControls(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            When overridden in an abstract class, creates the control hierarchy that is used to render the composite data-bound control based on the values from the specified data source.
            </summary>
            <param name="dataSource">An <see cref="T:System.Collections.IEnumerable"/> that contains the values to bind to the control.</param>
            <param name="dataBinding">true to indicate that the <see cref="M:System.Web.UI.WebControls.CompositeDataBoundControl.CreateChildControls(System.Collections.IEnumerable,System.Boolean)"/> is called during data binding; otherwise, false.</param>
            <returns>
            The number of items created by the <see cref="M:System.Web.UI.WebControls.CompositeDataBoundControl.CreateChildControls(System.Collections.IEnumerable,System.Boolean)"/>.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML opening tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML closing tag of the control into the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.NodeCreated">
            <summary>
            Occurs when [node created].
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.NodeBound">
            <summary>
            Occurs when [node bound].
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.ItemTemplate">
            <summary>
             ItemTemplate
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.ItemTemplatePath">
            <summary>
            Path and filename of the user control to load if the ItemTemplate is not specified declaratively.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.ListTemplate">
            <summary>
            Gets or sets the list template.
            </summary>
            <value>
            The list template.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBase.ListTemplatePath">
            <summary>
            Path and filename of the user control to load if the ListTemplate is not specified declaratively.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.OnInit(System.EventArgs)">
            <summary>
            Override the init-event; ensure Templates are set.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.OnLoad(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.OnPreRender(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.EditorMenu_CollectionChangedEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the CollectionChangedEvent event of the ContextMenu control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.LoadStrategies(Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu)">
            <summary>
            Loads the strategies.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.GetStrategies(Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu)">
            <summary>
            Gets the strategies.
            </summary>
            <param name="contextMenu">The context menu.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.RetrieveStrategies">
            <summary>
            Gets the editor strategies.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BaseContextMenu.AssociatedControlID">
            <summary>
            Gets or sets the associated control ID.
            </summary>
            <value>
            The associated control ID.
            </value>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetNode(System.String)">
            <summary>
            Returns the ID-specified node, if found.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetNodeFromPath(System.String)">
            <summary>
            Returns the path-specified node, if found.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetParentNode(System.String)">
            <summary>
            Returns the parent of the ID-specified node, if found.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetParentNode(Ektron.Cms.Framework.UI.Tree.ITreeNode)">
            <summary>
            Returns the parent of the given node, if found.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DataBind">
            <summary>
            Binds control to the supplied data source, specified using the 
            DataSource property.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.AddProcessor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ITreeDataProcessor)">
            <summary>
            Provides an extension point, to add a custom ITreeDataProcessor 
            adapter to be inserted into the tree-data processing chain.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnItemDataBindingEvent(Ektron.Cms.Framework.UI.Tree.TreeNodeCollection)">
            <summary>
            Called to fire ItemDataBound event for each node in the supplied data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnPreSerializeDataEvent(Ektron.Cms.Framework.UI.Tree.TreeNodeCollection)">
            <summary>
            Called to fire PreSerializeData event, allowing subscribers to 
            inspect and alter the supplied data, before it is serialized 
            for the client.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnCommandEvent(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Called to fire the Command event, typically when a node with a 
            CommandName is clicked. If CommandArgument is specified on the 
            node, it will also be passed to the handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnClickEvent(System.EventArgs)">
            <summary>
            Called to fire the Click event, when a tree node click is detected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnSelectionEvent(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeSelectionEventArgs)">
            <summary>
            Called to fire the SelectionEvent event, when a tree node selection is detected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnCallback(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeAjaxCallbackEventArgs)">
            <summary>
            Called to fire the Callback event, when an Ajax callback is 
            made from the tree controls client-side code (JavaScript). 
            Values may be inspected, modified, or the default processing 
            can be aborted - resulting in the current/custom values being 
            serialized back to the client.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.LoadTemplate(System.String)">
            <summary>
            Given a site-path to a template (ASCX/user-control) file, will 
            load and attempt to initialize it for later use to generate the UI 
            (either the markup directly, or the client-side templates to be 
            bound by the tree JavaScript code). The template should implement 
            interface ITreeTemplate.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.InitializeTemplate(System.Web.UI.ITemplate)">
            <summary>
            Initializes the template, especially ITreeTemplate related values.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.SetTemplateTreeOptions(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ITreeTemplate)">
            <summary>
            Helper method, sets the tree-options object that is used by the 
            ITreeTemplate and JavaScript code.
            </summary>
            <param name="treeTemplate"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetFlatList(Ektron.Cms.Framework.UI.Tree.TreeNodeCollection,System.Collections.Generic.IList{`0})">
            <summary>
            Converts the nested items tree-data collection into a sinle flat-
            list containing all data nodes in a non-nested list.
            </summary>
            <param name="items"></param>
            <param name="flatList"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.InternalDataBind">
            <summary>
            Called when the control is actually attempting to data bind.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnDataBinding(System.EventArgs)">
            <summary>
            Fired by control base-class, used to expose DataBinding event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.AddParsedSubObject(System.Object)">
            <summary>
            AddParsedSubObject must be overridden in TreeBase-subclass (to map 
            the declarative data to the proper tree data type).
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.OnPreRender(System.EventArgs)">
            <summary>
            Deffers actual tree-data processing and consuption/serialization 
            until the PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RenderTree(System.Boolean)">
            <summary>
            Called when the tree data should be processed and optionally 
            (typically) serialized to the client.
            </summary>
            <param name="serializeTree"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.SetItemsProperties(Ektron.Cms.Framework.UI.Tree.TreeNodeCollection)">
            <summary>
            Exposed to allow subclasses an opportunity to set the properties 
            of the tree item data. This is typically handled in the 
            data-fetching phase by the visitors for the tree controls that are 
            dedicated to specific CMS data types (e.g. FolderTree, 
            TaxonomyTree, MenuTree).
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.SerializeTree">
            <summary>
            Call to attempt to serialize the tree data for transfer to the 
            client. Note that this is handled in the ITreeTemplate template, 
            which may choose to render the data directly on the server side 
            and emit markup to the client.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RefreshPostedData">
            <summary>
            When the posted tree-data is deserialized, it may be out of synch 
            with the backing data source. This method attempts to refresh the 
            current tree data by re-querying the data source for the specific 
            nodes contained.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetCountPerContainer(Ektron.Cms.Framework.UI.Tree.TreeNodeCollection,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Helper for RefreshPostedData().
            </summary>
            <param name="items"></param>
            <param name="countTable"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ConvertCountTableToPageTable(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Helper for RefreshPostedData().
            </summary>
            <param name="countTable"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetData">
            <summary>
            Attepts to pull data from the container or the supplied data via 
            the DataSource property, and return it in a digestable format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetData(Ektron.Cms.Common.TreeCriteria)">
            <summary>
            GetData() helper.
            </summary>
            <param name="treeCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetData(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            GetData() helper.
            </summary>
            <param name="rootId"></param>
            <param name="countTable"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.InitializeDataVisitor(Ektron.Cms.Framework.UI.Controls.EktronUI.CmsDataVisitorBase{`0},Ektron.Cms.Common.TreeCriteria)">
            <summary>
            The data source may provide the data in a CMS data type, which may 
            not be directly usable; therefore Data-Visitors are used to 
            adapt/transform the data as needed. This method provides common 
            initialization, that may be completed in a subclass.
            </summary>
            <param name="visitor"></param>
            <param name="treeCriteria"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetClickPostBackEventReference">
            <summary>
            Used to supply the tree JavaScript code with a method reference 
            that can be used to fore a postback to the server, for Click events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetCommandPostBackEventReference">
            <summary>
            Used to supply the tree JavaScript code with a method reference 
            that can be used to fore a postback to the server, for Command events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RaiseCallbackEvent(System.String)">
            <summary>
            This method is an intermediary for Ajax-callbacks; ASP.NET will 
            call this when a callback with the appropriate information is 
            detected. This method will pass control off to the proper 
            tree-manager and fire related events.
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.GetCallbackResult">
            <summary>
            ASP.NET will call this method when it attempts to return results 
            to the initiator of the Ajax-callback. We return the serialized 
            data as payload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RaisePostBackEvent(System.String)">
            <summary>
            ASP.NET raises this event when a postback for this control is 
            detected. We pass off control to the appropriate tree-manager 
            and raise the relevant events.
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.PreSerializeData">
            <summary>
            Event fires just before serializing the data for sending to the 
            client. This is the last opportunity to inspect or modify the 
            data before it is made available for rendering the UI.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Command">
            <summary>
            Command event will fire when a node with a CommandName is clicked. If CommandArgument is specified on the node, it will also be passed to the handler.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Click">
            <summary>
            Event fires when a tree node is clicked.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.SelectionEvent">
            <summary>
            Fired for all postbacks, passes the IDs of the currently selected nodes.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DataBinding">
            <summary>
            Fires when the control is data binding.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ItemDataBound">
            <summary>
            Fires for each node when the control is databinding.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Callback">
            <summary>
            Fires when an Ajax callback is made from the tree controls 
            client-side code (JavaScript). Values may be inspected, modified, 
            or the default processing can be aborted - resulting in the 
            current/custom values being serialized back to the client.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.CausesValidation">
            <summary>
            Set to true to trigger validation when the control generates a 
            postback. Default: false.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ValidationGroup">
            <summary>
            The validation group name to use, when CausesValidation is true. 
            Default: null.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.SelectionMode">
            <summary>
            The selection mode for the tree nodes. Default: none (selections are not allowed by default).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.UseInternalAdmin">
            <summary>
            Set to true to impersonate an adminstrator when using the CMS 
            Framework APIs. Setting to false uses the current users ID, 
            which may prevent rendering data due to insufficient previledges. 
            Default: true.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ShowRoot">
            <summary>
            Set to false to prevent rendering the root node. Default: true.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.PagingText">
            <summary>
            The text to display when there are more siblings than are shown. 
            Default: more...
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RegisterCss">
            <summary>
            Set to false to disable registering/including the default CSS for 
            the control. Default: true.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.AutoPostBackOnSelectionChanged">
            <summary>
            When set to true, will fire a postback to the server whenever a 
            tree-node slection change is made. Note that the selection mode 
            must be set to something other than None to allow selections. 
            Default: false.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.BeforeAjax">
            <summary>
            Client-side Callback method; When set to the name of a JavaScript 
            function, it will call it - passing the parameters used for the 
            Ajax callback, providing customization of the payload or even 
            aborting the callback all together. This can be used with the 
            server side OnCallback event, to capture/process/control the 
            operation on the server side. Default: null.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.TemplatePath">
            <summary>
            Set to override the default template, that is used to generate the 
            UI. If the custom template generates the UI on the server side, 
            then the JSON (data) value sent to the client should be null. When 
            the client side code should render the UI, then the supplied JSON 
            will be bound the the supplied template(s) using the Temple jQuery 
            templating engine.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DefaultTemplate">
            <summary>
            Used to specify the default template: 
            ClientRender: Sends tree data as JSON to the client, where it 
             is bound to supplied templates for rendering the UI.
            ServerRender: The tree data is bound to server controls to render 
             the UI on the server-side. Resulting markup is sent to the browser.
            DataDump: The tree data (name/value-pairs) is rendered (useful for 
             the page developer to understand what values and options available).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.CurrentNodeId">
            <summary>
            Returns the currently selected (or last) node ID, if any.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.CurrentNodePath">
            <summary>
            Returns the currently selected (or last) node-path, if any.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.CurrentNode">
            <summary>
            Returns the currently selected node, if any.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Items">
            <summary>
            The nested collection of the trees node-data.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ItemsFlatList">
            <summary>
            The collection of the trees node-data, presented in a single, non-nested, Flat-List.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RootId">
            <summary>
            The root-ID of the tree, to start fetching data from. If not specified, then the tree is not rendered.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.PageNumber">
            <summary>
            The current page number, when the number of sibling nodes are 
            limited by the page size. Default: 1.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.PageDepth">
            <summary>
            The number of levels to go, below the current level, to 
            fetch/process data and render the tree UI. If this value is 
            greater than zero and less than the number of levels in the data 
            source, then truncated child-nodes will be fetched using Ajax 
            callbacks as their parents are opened by the user. When this value 
            is zero, then there is no limit - all nested data levels will be 
            fetched and sent to the UI. Default: Control-type dependant.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.PageSize">
            <summary>
            When greater than zero, this number specifies the number of 
            siblings to fetch from the data (per parent node) and render to 
            the UI. If more siblings than allowed by this setting, then a 
            "more..." link (text can be overridden using the PagingText 
            property) will be rendered, allowing additional sibling nodes to 
            be fetched using Ajax callbacks. If this value is set to zero, then 
            no limit is specified and all sibling nodes will be included at once.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RefreshPostedDataEnabled">
            <summary>
            When enabled, will re-query database with the posted tree-data, and 
            update before rerendering. Note that this reduces performance, and 
            should only be enabled when needed. Default: False.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DataSource">
            <summary>
            The data source to use when databinding, used in code-behind.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Template">
            <summary>
            The ITreeTemplate template to use. Normally this is set internally
            , either using one of the default templates, or through the 
            TemplatePath property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DefaultProcessor">
            <summary>
            The default ITreeDataProcessor tree-data processor, typically set 
            internally, and control-type dependant.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Selections">
            <summary>
            An array containing the IDs of the currently selected nodes. 
            Empty if no nodes are selected.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ExpandedNodes">
            <summary>
            An array containing the IDs of the currently expanded nodes 
            (e.g. the open-parent nodes). Empty if no nodes are selected.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.IsPostBack">
            <summary>
            Exposes Page.IsPostBack
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.IsCallback">
            <summary>
            Exposes Page.IsCallback
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.IsDataBinding">
            <summary>
            Indicates if the control is currently handling databinding 
            processing.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.LevelOffSet">
            <summary>
            Used internally (typically during Ajax callback) when fetching 
            nested data that had previously been truncated due to PageDepth.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.Path">
            <summary>
            Used internally as a prefix for new data node path values 
            (typically during Ajax callback), when fetching nested data that 
            had previously been truncated due to PageDepth.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.DefaultTemplatePath">
            <summary>
            Specifies the default template to use when generating the UI for 
            the tree. Overridden in concrete tree controls, typically to the 
            appropriate ClientRender template.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.ICmsContextService">
            <summary>
            Overridable CmsContextService accessor, used internally, defers creation until needed.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.TreeManager">
            <summary>
            Overridable TreeManager accessor, used internally (selects 
            appropriate manager depending on page-GET/POST or 
            Ajax-callback), defers creation until needed.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.RefreshPostedDataSupported">
            <summary>
            Overridden in some sub-classes, as appropriate (if they support 
            refreshing the posted back tree data by querying the data source 
            for any potential changes).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TreeBase`1.TagKey">
            <summary>
            Override default tag-type; use a div instead of a span:
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.EktronUIControlDesigner">
            <summary>
            Ektron UI Control designer 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.EktronUIControlDesigner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.EktronUIControlDesigner.AllowResize">
            <summary>
            Allow Resize property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.ContextMenuBaseEventHandler">
            <summary>
            ContextMenuBaseEventHandler
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.DefaultSortableDataSource">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.ISortable">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.EmailListRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.CoreValidationRules">
            <summary>
            Container class, to present or filter the visible rules to only the core 
            set. All core control-validation-rules will inherit from this class.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.AllValidationRules">
            <summary>
            All validation rules base class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AllValidationRules.ValidationRule">
            <summary>
            Validation Rule Property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AllValidationRules.ErrorMessage">
            <summary>
            Error message property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AllValidationRules.ClientValidationEnabled">
            <summary>
            ClientValidationEnabled property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AllValidationRules.ServerValidationEnabled">
            <summary>
            ServerValidationEnabled property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.UrlSchemaRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.InputValidator.Validate">
            <summary>
            IInputValidator / IValidator Member - executes the validation logic that's implemented in the subclass.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.InputValidator.GetControlValue(System.Web.UI.Control)">
            <summary>
            Returns the value held by the control to validate (uses ValidationProperty for complex controls).
            </summary>
            <param name="control">The target control: Optional, uses ControlToValidate if not passed.</param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.InputValidator.ControlToValidate">
            <summary>
            References the control to be validated, used to access its' value, visible-state, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.InputValidator.ErrorMessage">
            <summary>
            IInputValidator / IValidator Member - returns current error message for failing validator. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.InputValidator.IsValid">
            <summary>
             IInputValidator / IValidator Member - returns validation status after calling Validate().
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getResourceTextJS(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Constructs a string of JavaScript code that can then be registered and sent to the client for execution that will define a namespaced ResourceText object.  The properties of the object are key/value pairs of resource text strings.
            </summary>
            <param name="desiredNamespace">The JS namespace that you want to use for the resource text object.</param>
            <param name="resources">A list of KeyValuePairs defining the property names and their values for the resource text object.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.createKeyValuePair(System.String,System.String)">
            <summary>
            Creates and returns a KeyVakluePair object for use in a list.
            </summary>
            <param name="key">The desired key name.</param>
            <param name="value">The desired value for the key.</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.isPluginNeeded(System.String)">
            <summary>
            Determines if a given plugin path is part of the ToolBar Config string
            </summary>
            <param name="pluginPath">The Aloha plugin path, ex: "ektron/sourceview" or "common/contenthandler"</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getEditInContextJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the EditInContext plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getEmbedJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the Embed plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getInspectorJS">
            <summary>
            Creates a package of JS files and resource text strings needed for the Inspector plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getLinkJS">
            <summary>
            Creates a package of JS files and resource text strings needed for the link plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getLibraryJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the Library plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getSourceViewJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the SourceView plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getTemplateJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the Template plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getTranslateJS">
            <summary>
            Creates a package of JS files and resource text strings  needed for the Translate plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.getValidatorJS">
            <summary>
            Creates a package of JS files and resource text strings needed for the Validator plugin.
            </summary>
            <returns>Package</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EditorBase.RaisePostBackEvent(System.String)">
            <summary>
            Raise post back event
            </summary>
            <param name="eventArgument">event argument string</param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadBase">
            <summary>
            FileUpload Base class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadBase.ImageUrl">
            <summary>
            Gets or sets the image URL. URL of image must be absolute. For relative path
            place images in FrameworkUI/Silverlight/EktronUI/FileUpload/ folder. 
            Name of property should be "/FileUpload/{imagename.extension}".
            Default images found in WorkArea/FrameworkUI/Silverlight/EktronUI/FileUpload.
            Example: "/FileUpload/fileUploadBrowse.png"
            </summary>
            <value>
            The image URL.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadBase.MouseDownImageUrl">
            <summary>
            Gets or sets the image URL of the mouse down state. URL of image must be absolute. 
            For relative path place images in FrameworkUI/Silverlight/EktronUI/FileUpload/ folder. 
            Name of property should be "/FileUpload/{imagename.extension}".
            Default images found in WorkArea/FrameworkUI/Silverlight/EktronUI/FileUpload.
            Example: "/FileUpload/fileUploadBrowse.png"
            </summary>
            <value>
            The MouseDown image URL.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadBase.MouseOverImageUrl">
            <summary>
            Gets or sets the image URL for the mouse over state. URL of image must be absolute. 
            For relative path place images in FrameworkUI/Silverlight/EktronUI/FileUpload/ folder. 
            Name of property should be "/FileUpload/{imagename.extension}".
            Default images found in WorkArea/FrameworkUI/Silverlight/EktronUI/FileUpload.
            Example: "/FileUpload/fileUploadBrowse.png"
            </summary>
            <value>
            The MouseOver image URL.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.IframeBase">
            <summary>
            The base class for the EktronUI:Iframe control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip">
            <summary>
            Server control to display a tooltip anchored to an information icon.
            Tied to /EktronUI/Tooltip.ascx user control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase">
            <summary>
            This abstract base class provides options for and registers
            the jQuery UI tooltip plugin for EktronUI Tooltip controls.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase"/> class
            and its members.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the control content.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.OnPreRender(System.EventArgs)">
            <summary>
            Registers the JavaScript required for the expected behavior of the widget.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.Builder">
            <summary>
            Option storage for script creation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.Hide">
            <summary>
            Gets or sets string value of the effect to be used when the tooltip appears. Default value - null
            </summary>
            <value>
            The effect to hide.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.PositionAt">
            <summary>
            Gets or sets the position on the anchor to align the tooltip against.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of where on the anchor to align the tooltip against.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.PositionCollision">
            <summary>
            Gets or sets the alternative position, for each axis, for when the tooltip overflows its container element in 
            some direction.
            This accepts a single value or a pair for horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none"
            "flip" will use the mirror position, (e.g. "left" instead of "right"); if flipping results in less of the 
            element being visible, the original position will be used.
            </summary>
            <value>
            Any combination of 1 or 2 instances of "flip" "fit" flipfit" and "none"
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.PositionMy">
            <summary>
            Gets or sets the position on the tooltip being positioned to align with its anchor.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of which side of the tooltip to align to its anchor.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.Show">
            <summary>
            Gets or sets string value of the effect to be used when the tooltip appears. Default value - null
            </summary>
            <value>
            The effect to show.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBase.Text">
            <summary>
            Gets or sets the text of the tooltip.
            </summary>
            <value>
            The text of the tooltip.
            </value>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.controlClass">
            <summary>
            The field containing the value returned by ControlClass.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.iconClass">
            <summary>
            The field containing the value returned by IconClass.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.initScript">
            <summary>
            The script to initialize the widget UI.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip"/> class,
            sets default values for members.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Registers initializing JavaScript and outputs server control content to a provided 
            <see cref="T:System.Web.UI.HtmlTextWriter"/>  object and stores tracing information 
            about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that 
            receives the control content.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.SetInitializationScript">
            <summary>
            Registers the initialization script.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.OnInit(System.EventArgs)">
            <summary>
            Loads the Infotip display user control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.OnPreRender(System.EventArgs)">
            <summary>
            Sets up jQuery initialization.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.ControlClass">
            <summary>
            Gets the control class(es).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.IconClass">
            <summary>
            Gets the icon class(es).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Infotip.Selector">
            <summary>
            Gets or sets the jQuery selector.
            </summary>
            <value>
            The jQuery selector.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.JavaScriptControlGroup.DefaultTemplate">
            <summary>
            Gets the name of the Default Template used for rendering the TextField control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.FileNameExtensionRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.AlphaOnlyRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.AllLowercaseRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.UrlRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.AllUppercaseRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.CreditCardRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.DigitsRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.EmailRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MaxLengthRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MinLengthRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CompareValidator.Comparer">
            <summary>
            Holds a reference to the object that performs the compare; optimized by field type, defaults to string.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Icons.GetIconClass(System.Enum)">
            <summary>
            This method returns the CSS class stored in the Icon enumeration's description for the value.
            </summary>
            <param name="iconClass">The enumeration value that you wish to get the description/class.</param>
            <returns>String</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Icons.ThemeRollerIcons">
            <summary>
            Enumeration that contains all of the icons provided by a jQuery UI Themeroller Theme.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MessageBase">
            <summary>
            Abstract base class for the EktronUI Message controls (Error, Help, Information, Success and Warning).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MessageBase.ControlClass">
            <summary>
            Gets a reference to the control class.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MessageBase.IconClass">
            <summary>
            Gets a reference to the Icon data class associated with the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MessageBase.Text">
            <summary>
            Gets or sets the text value output by the control
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MessageBase.ContentTemplate">
            <summary>
            The template that holds controls/markup to be rendered for the control. 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Message.#ctor">
            <summary>
            Ektron UI server control for rendering one of five types of messages: Error, Help, Information, Success or Warning.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Message.DisplayMode">
            <summary>
            Gets or sets the display type of the message to one of the following: Error, Help, Information, Success and Warning.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ValidatingInputBase`3">
            <summary>
            Classes that inherit from this class will expose an error message property, 
            which is intended to provide the text to be used for the built-in validation 
            rule.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ValidatingInputBase`3.ErrorMessage">
            <summary>
            The validation error message, to be shown when 
            the built-in validation rule fails.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.PasswordField.Value">
            <summary>
            Strongly typed value accessor.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl">
            <summary>
             PlaceHolderControl
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template. </param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl.ExtractValues(System.Web.UI.Control)">
            <summary>
            When implemented by a class, retrieves a set of name/value pairs for values bound using two-way ASP.NET data-binding syntax within the templated content.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Specialized.IOrderedDictionary"/> of name/value pairs. The name represents the name of a control within templated content, and the value is the current value of a property value bound using two-way ASP.NET data-binding syntax.
            </returns>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> from which to extract name/value pairs, which are passed by the data-bound control to an associated data source control in two-way data-binding scenarios.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl.DataItem">
            <summary>
            When implemented, gets an object that is used in simplified data-binding operations.
            </summary>
            <returns>
            An object that represents the value to use when data-binding operations are performed.
            </returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl.DataItemIndex">
            <summary>
            When implemented, gets the index of the data item bound to a control.
            </summary>
            <returns>
            An Integer representing the index of the data item in the data source.
            </returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.PlaceHolderControl.DisplayIndex">
            <summary>
            When implemented, gets the position of the data item as displayed in a control.
            </summary>
            <returns>
            An Integer representing the position of the data item as displayed in a control.
            </returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Progressbar">
            <summary>
            Progressbar class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase">
            <summary>
            Button Base class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.#ctor">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Handle render event
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.SetInitializationScript">
            <summary>
            override Set Initialization Script
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.AutoHide">
            <summary>
            Gets or sets the control's visibility upon rendering in an browser.  True applies a css display:none rule to the control when rendering.  Default is False.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.Value">
            <summary>
            Gets or Sets the value of the progressbar.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.OnClientChange">
            <summary>
            Gets or Sets a JavaScript callback function that is triggered when the value of the progressbar changes.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.OnClientComplete">
            <summary>
            Gets or Sets a JavaScript callback function that is triggered when the value of the progressbar reaches the maximum value of 100.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.Options">
            <summary>
            Gets or sets the available options for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarBase.ClientEvents">
            <summary>
            Gets or sets the available options for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.TaxonomyTree.PageSize">
            <summary>
            Paging/PageSize is not supported for the TaxonomyTree - always returns all silings.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.ControlUtilities">
            <summary>
            General helper methods for controls
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.ControlUtilities.FindControl(System.Web.UI.Control,System.String)">
            <summary>
            Finds the control.
            </summary>
            <param name="control">The control whose children, and then page-controls, will be searched</param>
            <param name="id">The identifier of the target control</param>
            <returns>The control if search is successful, null otherwise</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.ControlUtilities.FindInnerControl(System.Web.UI.ControlCollection,System.String)">
            <summary>
            Searches the child controls recursively, until a matching ID is found
            </summary>
            <param name="collection">The control collection to begin the search from</param>
            <param name="id">The identifier of the target control</param>
            <returns>The control if search is successful, null otherwise</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.ControlUtilities.FindRoot(System.Web.UI.Control)">
            <summary>
            Iterates up the ancestory contextMenuBase until a control that has a parent of type HtmlForm is found
            </summary>
            <param name="control">The control to start the search from</param>
            <returns>The control if search is successful, null otherwise</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.CssManager">
            <summary>
            Combines the page designers CSS class names with those for the server 
            control, for rendering to the outer element in the template.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.CssManager.ToString">
            <summary>
            Automatically performs call to get the class attribute, simplifying use.
            </summary>
            <returns>The complete class attribute; the attributes name, together with 
            all class-names that were specified by the page developer and the control itself.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.CssManager.CssClass">
            <summary>
            Set from the server controls' property of the same name, 
            allowing page designer to add CSS class names.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.CssManager.ControlClass">
            <summary>
            The CSS class name(s) relevant to the control itself.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Utilities.CssManager.ClassAttribute">
            <summary>
            Returns the class attribute to be used on the outer element, 
            including the attribute name itself ("class").
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionWrapper">
            <summary>
            AccordionWrapper class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionWrapper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionWrapper.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render begin tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionWrapper.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render End tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CaptchaType">
            <summary>
            Characrter set for captcha control
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.DesignTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            The GetStandardValues method returns the list of designs specified for the control.  It gets this list
            by reading ControlDesigns.xml (which is located in the bin directory).  It also has to get the Ektron
            namespace Uri and prefix from web.config.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DesignTypeConverter.ControlType">
            <summary>
            This property should be overridden in the inheriting control and the get should include the name of the control.
            The Design property in the control class should specify the name of the inheriting class as it's TypeConverter.
            Example, the Design property in the ContentListSummary Control has the following:
            [TypeConverter(typeof(ContentListSummaryTypeConverter))] - and ContentListSummaryTypeConverter inherits from DesignTypeConverter
            and overrides this property to return the string "ContentListSummary"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DesignTypeConverter.SitePath">
            <summary>
            Returns the installation path of CMS400 as a Uri (e.g. file://C:/Inetpub/wwwroot/CMS400Demo/)
            Note the trailing slash is present!
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.IOrder">
            <summary>
            IOrder
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.IOrder.Rank">
            <summary>
            Gets or sets the rank.
            </summary>
            <value>
            The rank.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItem">
            <summary>
            MenuItem
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node">
            <summary>
            Node for ContextMenuBase
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>
            The tooltip.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.OnClientClick">
            <summary>
            Gets or sets the on client click.
            </summary>
            <value>
            The on client click.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.NavigateUrl">
            <summary>
            Gets or sets the navigate URL.
            </summary>
            <value>
            The navigate URL.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>
            The name of the command.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.CommandArgument">
            <summary>
            Gets or sets the command agrument.
            </summary>
            <value>
            The command agrument.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.HasChildren">
            <summary>
            Gets or sets a value indicating whether this instance has children.
            </summary>
            <value>
            	<c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItem.ClickHandler">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItem.CommandHandler">
            <summary>
            Gets or sets the command handler.
            </summary>
            <value>
            The command handler.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs">
            <summary>
            MenuItemEventArgs
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs"/> class.
            </summary>
            <param name="e">The <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs.CommandName">
            <summary>
            Gets the name of the command.
            </summary>
            <value>
            The name of the command.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuItemEventArgs.CommandArgument">
            <summary>
            Gets the command argument.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs">
            <summary>
            Arguments for a Node
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node,System.Web.UI.Control,System.Object,System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="control">The control.</param>
            <param name="commandSource">The command source.</param>
            <param name="originalArgs">The <see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.Items.Node,System.Web.UI.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="control">The control.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs.CommandSource">
            <summary>
            Gets the command source.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ContextMenuBase.ContextMenuBaseEventArgs.InstantiatedControl">
            <summary>
             InstantiatedControl
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu.Add(Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenuStrategy)">
            <summary>
            Adds the specified context menu strategy.
            </summary>
            <param name="contextMenuStrategy">The context menu strategy.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu.Remove(Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenuStrategy)">
            <summary>
            Removes the specified context menu strategy.
            </summary>
            <param name="contextMenuStrategy">The context menu strategy.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu.RetrieveStrategies">
            <summary>
            Retrieves the strategies.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu.CollectionChangedEvent">
            <summary>
            Occurs when [collection changed event].
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenu.InitializingCollectionEvent">
            <summary>
            Last chance to add a strategy before rendering starts
            Occurs when [initializing collection event].
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenuStrategy">
            <summary>
            IContextMenuStrategy
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenuStrategy.GetMenuItems">
            <summary>
            Gets the menu items.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.IContextMenuStrategy.StrategyChangedHandler">
            <summary>
            Occurs when [strategy changed handler].
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.Button.BoundClick">
            <summary>
            Gets or sets the bound click.
            </summary>
            <value>
            The bound click.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.Button.BoundCommand">
            <summary>
            Gets or sets the command.
            </summary>
            <value>
            The command.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.LinkButton">
            <summary>
            LinkButton
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.LinkButton.BoundClick">
            <summary>
            Gets or sets the bound click.
            </summary>
            <value>
            The bound click.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.EventBoundControls.LinkButton.BoundCommand">
            <summary>
            Gets or sets the command.
            </summary>
            <value>
            The command.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadSandbox.UploadDirectoryPath">
            <summary>
            This folder must have the proper permissions for a web application to write to it.  Either ASPNET or NETWORK SERVICE
            user needs write access, depending on your OS/IIS version.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadUtility.BuildInitParamsString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Build an init params string from the supplied collection of name,value pairs.
            </summary>
            <param name="initParams"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadUtility.EscapeInitParam(System.String)">
            <summary>
            Escape things that are not allowed in the silverlight init params string (currently just replaces commas with a token).
            </summary>
            <param name="initParam"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadUtility.ParseInitParams(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Given the collection of all init params, parse any special tokens in the parameters.
            </summary>
            <param name="initParams"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadUtility.ParseInitParam(System.String)">
            <summary>
            Parse any special tokens in a single init param.
            </summary>
            <param name="initParam"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadCompleteEventArgs">
            <summary>
            Exposes Date selected by user
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FileUploadProcessor">
            <summary>
            Example uploaded file processor.  Typically you would do something useful here, like place the document into a database,
            or create thumbnails from an uploaded image, or whatever is appropriate.  This example just deletes the file from
            the sandbox folder to prevent files from accumulating during testing.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.IUploadedFileProcessor">
            <summary>
            Interface for classes that can be used as the UploadedFileProcessorType on UploaderControl2.
            When a file has been completely uploaded, if an UploadedFileProcessorType has been set on the uploader web control,
            the ProcessFile method will be called, which gives custom code an opportunity to process the file.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.IUploadedFileProcessor.ProcessFile(System.Web.HttpContext,System.String,System.String,System.String,System.String)">
            <summary>
            Process an uploaded file.
            </summary>
            <param name="context">http context for the request</param>
            <param name="directoryPath"></param>
            <param name="fileGuid">
            FileGuid that uniquely identifies the uploaded file.
            </param>
            <param name="fileName">File name (does not include any path information, which is security critical in silverlight)</param>
            <param name="contextParam">
            A string with context information.  Corresponds to the UserContextParameter property of the FileCollection, which is
            exposed via the setUserContext() js method on the UploaderControl javascript wrapper class.
            </param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CultureSensitiveValidatingInputBase`3">
            <summary>
            Classes that inherit from this will expose an error message property, 
            which is intended to provide the text to be used for the built-in validation 
            rule.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Label">
            <summary>
            Represents a label control, which displays text on a Web page, and works correctly with other Framework UI controls for determining the correct AssociatedControlID.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.AssociatedControlID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.Enabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.CssClass">
            <summary>
            Gets or sets the Cascading Style Sheet (CSS) class rendered by the control on the client.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.ID">
            <summary>
            Gets or sets the programmatic identifier assigned to the server control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.TabIndex">
            <summary>
            Gets or sets the tab index of the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.ToolTip">
            <summary>
            Gets or sets the text displayed when the mouse pointer hovers over the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.ViewStateMode">
            <summary>
            Gets or sets the view-state mode of this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Label.Visible">
            <summary>
            Gets or sets a value that indicates whether a control is rendered as UI on the page.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.LabelBase">
            <summary>
            The base class for the EktronUI:Label control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.CustomRule">
            <summary>
            Provides a mechanism to have a custom method to perform the actual 
            validation test, possibly involving a complex control or multiple controls.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.DateRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.RegexRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.RequiredRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.NotJustWhitespaceRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.MinValue">
            <summary>
            Gets or sets the maximum decimal value allowed.  (Default is JavaScript's Number.MIN_VALUE)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.MaxValue">
            <summary>
            Gets or sets the minimum decimal value allowed.  (Default is JavaScript's Number.MAX_VALUE)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.PageCount">
            <summary>
            Gets or sets the multiple of Steps (up or down) to be taken when a user presses the PageUp or PageDown key. (Default is 10)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.Step">
            <summary>
            Gets or sets size of the step to take when spinning. (Default is 1)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.Incremental">
            <summary>
            Gets or sets if the stepping delta will increase when spun incessantly. i.e. spinning jumps up a notch at set increments. (Default True)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.IntegerField.Value">
            <summary>
            Strongly typed value accessor.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.MinValue">
            <summary>
            Gets or sets the maximum decimal value allowed.  (Default is JavaScript's Number.MIN_VALUE)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.MaxValue">
            <summary>
            Gets or sets the minimum decimal value allowed.  (Default is JavaScript's Number.MAX_VALUE)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places allowed beyond the decimal symbol before rounding off to the nearest decimal place. (Default is 2)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.PageCount">
            <summary>
            Gets or sets the multiple of Steps (up or down) to be taken when a user presses the PageUp or PageDown key. (Default is 10)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.Step">
            <summary>
            Gets or sets size of the step to take when spinning. (Default is 1)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.Incremental">
            <summary>
            Gets or sets if the stepping delta will increase when spun incessantly. i.e. spinning jumps up a notch at set increments. (Default True)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DecimalField.Value">
            <summary>
            Strongly typed value accessor.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DateField.Value">
            <summary>
            strongly typed value accessor
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CssBlockBase.BrowserTarget">
            <summary>
            Gets or Sets the browser(s) to which this CSS file will be loaded.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CssBlockBase.Media">
            <summary>
            Gets or Sets the media attribute of the link tag generated by this control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationClientIDPropertyAttribute">
            <summary>
            ValidationClientIDPropertyAttribute class 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationClientIDPropertyAttribute.#ctor(System.String)">
            <summary>
            Property attribute
            </summary>
            <param name="propertyName">Property Name</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationClientIDPropertyAttribute.Name">
            <summary>
            Name property
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.SetupOnClientClick(System.Web.UI.Control,System.String)">
            <summary>
            Given a control that supports it, and a validation group name, 
            updates the control to have its' OnClientClick property set to 
            the Ektron Group Validation Javascript method with the proper 
            group name. Also sets the controls' ValidationGroup and 
            CausesValidation properties if supported.
            </summary>
            <param name="control">The postback-generating control that should be associated with the given validation group</param>
            <param name="validationGroupName">The text-ID of the validation group, or empty string if no group</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetValidationErrors(System.Web.UI.Page)">
            <summary>
            Returns a list of all server side validation errors for the page. Note that 
            if page validation has not yet occurred, then no error messages will be returned.
            Page validation is called automatically during postback processing, after 
            page load and before user event handlers such as button clicks are called.
            Page.Validate() may be called manually to force validation earlier.
            </summary>
            <param name="page">A reference to the current page object</param>
            <returns>Returns a list of validation errors for all validated controls on 
            the page (includes all types, ASP.NET Validation controls, custom IValidator 
            validation controls and Ektron validation controls).</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetAssociatedControl(System.Web.UI.Control,System.String)">
            <summary>
            Helper method, used to obtain a control that's associated with a given control to validate.
            The associated control must exist in the same parent or naming container as the EktronUI Control.
            </summary>
            <param name="controlToValidate"></param>
            <param name="associatedControlID"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetBaseControlContainer(System.Web.UI.Control)">
            <summary>
            Helper method, used to obtain the container of a base-control, given control to validate.
            For example, the NamingContainer of the underlying InputBase control would be returned given 
            a controlToValidate that exists in a TextField template.
            </summary>
            <param name="controlToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetBaseControl(System.Web.UI.Control)">
            <summary>
            Helper method, used to obtain the base-control, given control to validate.
            For example, a corresponding instance of InputBase would be returned given 
            a controlToValidate that exists in a TextField template.
            </summary>
            <param name="controlToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetTemplate(System.Web.UI.Control)">
            <summary>
            Returns the EktronUI template that contains the controlToValidate.
            </summary>
            <param name="controlToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.FindSiblingControl(System.Web.UI.Control,System.String)">
            <summary>
            Given a control, attempts to find a sibling control with the supplied ID.
            </summary>
            <param name="control"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationUtilities.GetAssociatedValidatableControlClientID(System.String,System.String)">
            <summary>
            Given a control's uniqueID and the ID of a control associated with the first, this method will return associated control's ClientID 
            </summary>
            <param name="uniqueID"></param>
            <param name="associatedControlID"></param>
            <returns></returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DialogButton.OnClientClick">
            <summary>
            Gets or sets the client-side script that executes when a control's Click event is raised.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs">
            <summary>
            Validation Error Handler Event arguments
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.UniqueID">
            <summary>
            Unique ID property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.ClientID">
            <summary>
            Client ID property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.IsValid">
            <summary>
            Is valid property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.ErrorMessage">
            <summary>
            Error Message property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.ControlToValidate">
            <summary>
            Control to validate property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandlerEventArgs.ValidatorTypeName">
            <summary>
            Validator Type Name Property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs">
            <summary>
            Custom Rule Validator Event Arguments
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs.ControlToValidate">
            <summary>
            Control to validate property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs.ErrorMessage">
            <summary>
            Error Message property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs.Enabled">
            <summary>
            Enabled Property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs.IsValid">
            <summary>
            Is valid property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorEventArgs.ContextInfo">
            <summary>
            Optional string, can be used to pass contextual information to custom validator.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Blueprint">
            <summary>
            Blue print class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterAllCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint CSS files (Screen, IE and print).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterFormsCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint Forms CSS file.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterIeCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint IE CSS file.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterPrintCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint Print CSS file.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterResetCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint Reset CSS file.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterTypographyCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint Typography CSS file.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.BlueprintBase.RegisterScreenCss">
            <summary>
            Gets or sets boolean value. When set to true this will register Blueprint Screen CSS file.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService">
            <summary>
            Client dependendancy service class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.RegisterDependenciesForValidation(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule,Ektron.Cms.Framework.UI.Package,Ektron.Cms.Framework.UI.Package)">
            <summary>
            RegisterDependenciesForValidation 
            </summary>
            <param name="control">control</param>
            <param name="rule">rule</param>
            <param name="validationPackage">validationPackage</param>
            <param name="package">package</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.AddPackage(Ektron.Cms.Framework.UI.Package,System.Web.UI.Control)">
            <summary>
            Add Package
            </summary>
            <param name="package">package</param>
            <param name="control">control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.Initialize(System.Web.UI.Control)">
            <summary>
            initialize 
            </summary>
            <param name="control">control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.RegisterPackages(System.Object,System.EventArgs)">
            <summary>
            RegisterPackages
            </summary>
            <param name="sender">sender object</param>
            <param name="e">event args</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.Page">
            <summary>
            Page Property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ClientDependencyService.ControlPackageItem">
            <summary>
            Control Package Item
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.RegistrationFileControlBase.Path">
            <summary>
            Gets or sets the path to the file being referenced.  The value must be the full path from the site root.  You may use tilde notation (~) to indicate application path. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.RegistrationFileControlBase.Aggregate">
            <summary>
            Gets or sets a value indicating whether or not this file should be aggregated with other referenced files (default: true).  False will force this file to load independantly.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CssBase.BrowserTarget">
            <summary>
            Gets or Sets the browser(s) to which this CSS file will be loaded.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.CssBase.Media">
            <summary>
            Gets or Sets the media attribute of the link tag generated by this control.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.GetFactory">
            <summary>
            Returns the previously created factory object from cache if present, 
            otherwise creates it and adds to cache before returning the factory object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.GetFactory(Ektron.Cms.Framework.UI.ICacheService)">
            <summary>
            Returns the previously created factory object from cache if present, 
            otherwise creates it and adds to cache before returning the factory object.
            </summary>
            <param name="iCacheService"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.SetFactory(Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.IValidationFactory)">
            <summary>
            Addes the supplied factory object to cache for subsequent calls (stored 
            in cache for the duration of the current request).
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.SetFactory(Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.IValidationFactory,Ektron.Cms.Framework.UI.ICacheService)">
            <summary>
            Addes the supplied factory object to cache for subsequent calls (stored 
            in cache for the duration of the current request).
            </summary>
            <param name="factory"></param>
            <param name="iCacheService"></param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.ICacheService">
            <summary>
            Accessor for an object that implements ICacheService. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateValidationFactory">
            <summary>
            Provides access to the default ValidationFactory creation method, or overriding this 
            with a custom method if desired. Important: Do not call other factory methods within 
            the custom ValidationFactory creation method, or deadlocks may result.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateRuleManager">
            <summary>
            Accessor to the RuleManager creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreatePageValidationManager">
            <summary>
            Accessor to the PageValidationManager creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreatePageRuleTransformer">
            <summary>
            Accessor to the PageRuleTransformer creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateValidationPackageResolver">
            <summary>
            Accessor to the ValidationPackageResolver creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateRuleToJsonTranslator">
            <summary>
            Accessor to the RuleToJsonTranslator creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateRuleAggregator">
            <summary>
            Accessor to the RuleAggregator creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.CreateClientDependencyService">
            <summary>
            Accessor to the ClientDependencyService creation method, allows overriding the default with a custom 
            creation method, inserting a custom method call before the default, etc. Important: Do not 
            call other factory methods within the custom creation method, or deadlocks may result. 
            Dependencies will be added automatically by calls to the factory outside of the lock.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IRuleManager">
            <summary>
            Accessor for an object that implements IRuleManager. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IPageValidationManager">
            <summary>
            Accessor for an object that implements IPageValidationManager. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IPageRuleTransformer">
            <summary>
            Accessor for an object that implements IPageRuleTransformer. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IValidationPackageResolver">
            <summary>
            Accessor for an object that implements IValidationPackageResolver. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IRuleToJsonTranslator">
            <summary>
            Accessor for an object that implements IRuleToJsonTranslator. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IRuleAggregator">
            <summary>
            Accessor for an object that implements IRuleAggregator. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFactory.IClientDependencyService">
            <summary>
            Accessor for an object that implements IClientDependencyService. Can be used to retrieve the 
            default object, or replace with a custom object that implements the interface.
            The IValidationFactory properties are used to retrieve (or update) the objects that 
            implement the corresponding interface. Updates are stored for the duration of the 
            current request when using the default cache service, or for a custom period if 
            the cache service is also overridden).
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRule.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.CustomRuleValidatorHandler,System.String,System.String,System.String)">
            <summary>
            Provides a mechanism to have a custom method to perform the actual validation test, possibly involving a complex control or multiple controls.
            </summary>
            <param name="handler">The callback method which will perform the validation test</param>
            <param name="errorMessage"></param>
            <param name="javascript">The supplied string is placed between script-blocks in the markup sent to the browser</param>
            <param name="contextInfo">Optional context info, to be used by the custom handler</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.JavaScriptBlockBase.ExecutionMode">
            <summary>
            OnEktronReady (default) executes JavaScript only after the DOM hierarchy has been fully 
            constructed during the initial request, or after Microsoft Ajax has completed updating the DOM 
            during an AJAX-Postback initiated by an control inside an UpdatePanel (see jQuery's .ready() function,
            and Microsoft's add_endRequest() event).  OnParse executes JavaScript as it is parsed by the browser inline.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.ValidatingTemplateBase`1">
            <summary>
            Class supports server and client side validation by enforcing methods 
            to return the validation controls' content (the text of the control 
            to validate), as well as the client-id for the Javascript plugin. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.TemplateBase`1.OnInit(System.EventArgs)">
            <summary>
            Page Init
            </summary>
            <param name="sender">sender</param>
            <param name="e">event args</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.TemplateBase`1.ControlContainer">
            <summary>
            Gets JqueryUI widget implementation
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.ValidatingTemplateBase`1.Text">
            <summary>
            The text of the control to validate. This will be used for server-side 
            validation upon postback. This is also used to implement the 
            ValidationProperty attribute, which allows ASP.NET validation controls 
            to function. All validatable controls must wire up this property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.ValidatingTemplateBase`1.ControlToValidate">
            <summary>
            The control to validate: if provided, then client side 
            validation will be supported. Otherwise it will not function properly 
            as it will not be able to properly identify the element to validate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.ValidatingTemplateBase`1.Container">
            <summary>
            Allows any code that obtains an object that implements IValidatableObject, access to the container control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.ValidatingTemplateBase`1.ValidationGroup">
            <summary>
            Gets or sets the the name of the validation group for the control. The default is an empty string, which indicates that this property is not set.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.AddRule(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Assigns the given rule to the control, adding validation to both the server side and the client.
            Multiple rules may be assigned to a control. They are executed in the order that they are added.
            Examples: Validation.AddRule(myControl, new RequiredRule("Supplied value must be a valid interger!"));
            </summary>
            <param name="controlToValidate"></param>
            <param name="validationRule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.RemoveRule(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Removes the designated rule for the given control.
            </summary>
            <param name="controlToValidate"></param>
            <param name="validationRule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.RemoveRules(System.Web.UI.Control)">
            <summary>
            Removes all rules for the given control.
            </summary>
            <param name="controlToValidate"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.GetValidationError(System.Web.UI.Control)">
            <summary>
            Returns the validation error for the specified control. If page validation 
            has not yet occurred, then no error messages will be returned.
            Page validation is called automatically during postback processing, after 
            page load and before user event handlers such as button clicks are called.
            Page.Validate() may be called manually to force validation earlier.
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.SetValidationGroup(System.Web.UI.Control,System.String)">
            <summary>
            Optimally a controls validation group should be specified on the associated rule, 
            but this method allows setting the validation group after a rule has been added.
            </summary>
            <param name="control">The control to set the validation group on</param>
            <param name="validationGroup">The validation group for the control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.AddGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">The current page object</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.RemoveGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">The current page object</param>
            <param name="handler">The method that had previously been wired to the event, that should no longer be called</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.AddControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control to monitor validation failure on</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.RemoveControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control that had previously been wired to 
            monitor validation failure on</param>
            <param name="handler">The method that had previously been wired to 
            the event, that should no longer be called</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.IsValid(System.Web.UI.Control,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Determines if the given controls' contents are currently valid (executes all validators associated 
            with this control). Useful if code alters a controls contents and you want to check if it is valid.
            </summary>
            <param name="control">The control to be validated.</param>
            <param name="errorMessage">Optional: A List (of type string) that hold the error message of the first failing validator.</param>
            <param name="resetAfterTest">Set true to clear any errors after testing, default is false (leave errors)</param>
            <returns>True if all the given controls associated validators pass, otherwise false</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.IsValid(System.Web.UI.Page,System.String,System.Collections.Generic.List{Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFailureInfo},System.Boolean)">
            <summary>
            Determines if the controls associated with a give validation group are valid 
            (including empty string for no-group), by running all validators (ValidationPackages) 
            with the given validationGroupName,  returning false if any of them fail.
            </summary>
            <param name="page">A reference to the current page object</param>
            <param name="validationGroupName">Optional: The validation group to test, 
            leave empty to test controls that are not associated with a validation group</param>
            <param name="failureInfo">Optional: A List of ValidationFailureInfo objects 
            that will be populated with the UniqueID of the control and ErrorMessage of 
            the rule, for each failure</param>
            <param name="resetAfterTest">Optional: If true, then will reset all failing 
            validators after testing, to prevent the Page.IsValid from being set false due 
            to this action</param>
            <returns>True of all validators for the specified group pass, false if any of them fail</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.SetupOnClientClick(System.Web.UI.Control,System.String)">
            <summary>
            Given a control that supports it, and a validation group name, 
            updates the control to have its' OnClientClick property set to 
            the Ektron Group Validation Javascript method with the proper 
            group name. Also sets the controls' ValidationGroup and 
            CausesValidation properties if supported.
            </summary>
            <param name="control">The postback-generating control that should be associated with the given validation group</param>
            <param name="validationGroupName">The text-ID of the validation group</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.ClientValidationEnabled">
            <summary>
            Globally enables or disables client side validation.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationAPI.IRuleManager">
            <summary>
            Gets and or sets the underlying rule manager object. 
            Assignments will last for the remainder of the request.
            Can add a custom managing layer by getting before setting,
            having custom layer call the original object or replace it entirely.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleToJsonTranslator.Initialize(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.GetRuleLookupTableHandler)">
            <summary>
            This method ensures that the page will include the client side validation 
            initialization code. This may be called more than once, but will internally 
            accept the supplied lookup-table on the first call of the request.
            </summary>
            <param name="page">page</param>
            <param name="ruleLookupTableHandler"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleToJsonTranslator.TranslateRules(System.Object,System.EventArgs)">
            <summary>
            This method is called by the Pages' PreRenderComplete event.
            At this point, rule aggregating is complete, and 
            we may process and send them to the client, to initialize
            the jQuery Validation Plugin.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleToJsonTranslator.BuildClientScript">
            <summary>
            Builds the initialization Javascript, calling each rule to 
            supply the required JSON for the control its' bound to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleToJsonTranslator.SendRulesToClient(System.String)">
            <summary>
            Takes the supplied Javascript and JSON string, and ensures it 
            will be available to execute in the browser during startup.
            </summary>
            <param name="rulesScript"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleToJsonTranslator.ValidationEnabled(Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Determines if the validation rule should be applied to the control.
            </summary>
            <param name="rule">The validation rule in question.</param>
            <returns>True if the rule should be applied, false otherwise</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.AddRuleToClientCache(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Adds a rule for the specified control to the client cache, which is 
            translated to JSON and sent to the client at the end of page processing.
            </summary>
            <param name="control">control</param>
            <param name="rule">rule</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.RemoveRuleFromClientCache(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Removes the designated rule for the control from the cache.
            </summary>
            <param name="control"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.RemoveRulesFromClientCache(System.Web.UI.Control)">
            <summary>
            Removes all rules for the control from the cache.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.GetRulesForAllControls(System.Web.UI.Page)">
            <summary>
            Ruturns all of the rules currently stored in the client-cache. 
            Identical server-side rules are processed immediately and converted 
            into IValidator objects and added to the Pages Validators collection.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.GetRulesForControl(System.Web.UI.Control)">
            <summary>
            Returns all of the rules for a given control that are currently stored 
            in the client-cache (to be sent to the client at the end of page processing). 
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleAggregator.RuleLookupTableHandler">
            <summary>
            Implements GetRuleLookupTableHandler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.AddRule(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Binds a given rule to the specified control, for validaing both on the server 
            and on the client. Server side validation errors will cause the Pages IsValid 
            property to be false after Page.Validate() has executed. Client validation 
            failures will generate visual cues in the UI through element-attribute changes, etc.
            </summary>
            <param name="controlToValidate"></param>
            <param name="validationRule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.RemoveRule(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Removes the designated rule for the given control.
            </summary>
            <param name="controlToValidate"></param>
            <param name="validationRule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.RemoveRules(System.Web.UI.Control)">
            <summary>
            Removes all rules for the given control.
            </summary>
            <param name="controlToValidate"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.IsValid(System.Web.UI.Control,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Determines if the given controls' contents are currently valid (executes all validators associated 
            with this control). Useful if code alters a controls contents and you want to check if it is valid.
            </summary>
            <param name="controlToValidate">The control to be validated.</param>
            <param name="errorMessage">A reference to a string which will recieve the error message of the first failing validator.</param>
            <param name="resetAfterTest">Set true to clear any errors after testing, default is false (leave errors)</param>
            <returns>True if all the given controls associated validators pass, otherwise false</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.IsValid(System.Web.UI.Page,System.String,System.Collections.Generic.List{Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFailureInfo},System.Boolean)">
            <summary>
            Determines if the controls associated with a give validation group are valid 
            (including empty string for no-group), by running all validators (ValidationPackages) 
            with the given validationGroupName,  returning false if any of them fail.
            </summary>
            <param name="page">A reference to the current page object</param>
            <param name="validationGroupName">Optional: The validation group to test, 
            leave empty to test controls that are not associated with a validation group</param>
            <param name="failureInfo">Optional: A List of ValidationFailureInfo objects 
            that will be populated with the UniqueID of the control and ErrorMessage of 
            the rule, for each failure</param>
            <param name="resetAfterTest">Optional: If true, then will reset all failing 
            validators after testing, to prevent the Page.IsValid from being set false due 
            to this action</param>
            <returns>True of all validators for the specified group pass, false if any of them fail</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.GetValidationError(System.Web.UI.Control)">
            <summary>
            Gets the validation error for a given control; empty string of no error, 
            or if the page has not yet automatically validated itself.
            </summary>
            <param name="controlToValidate">controlToValidate</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.SetValidationGroup(System.Web.UI.Control,System.String)">
            <summary>
            Optimally a controls validation group should be specified on the associated rule, 
            but this method allows setting the validation group after a rule has been added.
            </summary>
            <param name="control">The control to set the validation group on</param>
            <param name="validationGroup">The validation group for the control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.AddGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">The current page object</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.RemoveGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">The current page object</param>
            <param name="handler">The method that had previously been wired to the event, that should no longer be called</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.AddControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control to monitor validation failure on</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.RemoveControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control that had previously been wired to 
            monitor validation failure on</param>
            <param name="handler">The method that had previously been wired to 
            the event, that should no longer be called</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.RuleManager.ClientValidationEnabled">
            <summary>
            Globally enables or disables client side validation.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageRuleTransformer.TransformRule(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Triggers the supplied rule to generate a server-side validator for the specified control. 
            The resulting validator will eventially be placed in the Pages' Validators collection for 
            automatic execution on postback, or programatically called at almost any time.
            </summary>
            <param name="controlToValidate"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.AddRuleToPage(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Triggers the conversion of the given rule to a server-side validator, finds 
            the validation container for the specified control (within the Pages' Validators 
            collection, creating a new one if not present), and adds the new validator to it.
            </summary>
            <param name="controlToValidate">The control that the rule will reference to validate</param>
            <param name="rule">The validation rule to be applied to the control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.RemoveRuleFromPage(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.Rule)">
            <summary>
            Removes the designated rule for the control from the validation container.
            </summary>
            <param name="controlToValidate"></param>
            <param name="validationRule"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.RemoveRulesFromPage(System.Web.UI.Control)">
            <summary>
            Removes all rules for the control from the validation container.
            </summary>
            <param name="controlToValidate"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.GetValidationPackage(System.Web.UI.Control)">
            <summary>
            Recovers the ValidationPackage for the specified control from the 
            Pages' Validators collection. Returns null if not present or if 
            the page is not ready to hold validators! Note: A ValidationPackage 
            is a validator container; one container per control, holding 
            one or more IValidators (one IValidator per assigned rule).
            </summary>
            <param name="controlToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.AddGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">A reference to the current page object</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.RemoveGlobalValidationErrorHandler(System.Web.UI.Page,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error 
            occurs for any control, which has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="page">A reference to the current page object</param>
            <param name="handler">The method that had previously been wired to the event, that should no longer be called</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.AddControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Be sure to call this method after adding all rules, as the callback will
            only be assigned for rules that exist at the time this method is called!
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control to monitor validation failure on</param>
            <param name="handler">The method to call when a validation error occurs</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.RemoveControlValidationErrorHandler(System.Web.UI.Control,Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationErrorHandler)">
            <summary>
            The event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            The method specified will be called whenever an validation error occurs 
            for the specifed control that has an Ektron validation rule applied.
            Do not call this method while handling a Validation-Error-Event!
            </summary>
            <param name="control">The control that had previously been wired to 
            monitor validation failure on</param>
            <param name="handler">The method that had previously been wired to 
            the event, that should no longer be called</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.GetValidationErrors(System.Web.UI.Page)">
            <summary>
            Returns a list of all server side validation errors for the page. Note that 
            if page validation has not yet occurred, then no error messages will be returned.
            Page validation is called automatically during postback processing, after 
            page load and before user event handlers such as button clicks are called.
            Page.Validate() may be called manually to force validation earlier.
            </summary>
            <param name="page">A reference to the current page object</param>
            <returns>Returns a list of validation errors for all validated controls on 
            the page (includes all types, ASP.NET Validation controls, custom IValidator 
            validation controls and Ektron validation controls).</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.IsValid(System.Web.UI.Control,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Determines if the given controls' contents are currently valid (executes all validators associated 
            with this control). Useful if code alters a controls contents and you want to check if it is valid.
            </summary>
            <param name="controlToValidate">The control to be validated.</param>
            <param name="errorMessage">A reference to a string which will recieve the error message of the first failing validator.</param>
            <param name="resetAfterTest">Set true to clear any errors after testing, default is false (leave errors)</param>
            <returns>True if all the given controls associated validators pass, otherwise false</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.PageValidationManager.IsValid(System.Web.UI.Page,System.String,System.Collections.Generic.List{Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationFailureInfo},System.Boolean)">
            <summary>
            Determines if the controls associated with a give validation group are valid 
            (including empty string for no-group), by running all validators (ValidationPackages) 
            with the given validationGroupName,  returning false if any of them fail.
            </summary>
            <param name="page">A reference to the current page object</param>
            <param name="validationGroupName">Optional: The validation group to test, 
            leave empty to test controls that are not associated with a validation group</param>
            <param name="failureInfo">Optional: A List of ValidationFailureInfo objects 
            that will be populated with the UniqueID of the control and ErrorMessage of 
            the rule, for each failure</param>
            <param name="resetAfterTest">Optional: If true, then will reset all failing 
            validators after testing, to prevent the Page.IsValid from being set false due 
            to this action</param>
            <returns>True of all validators for the specified group pass, false if any of them fail</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.Add(System.Web.UI.IValidator)">
            <summary>
            Adds a new validator to the collection for the control. They 
            will later be executed in the order that they were added.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.Remove(System.Web.UI.IValidator)">
            <summary>
            Removes the designated validator from the package.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.RemoveAllValidators">
            <summary>
            Removes all validators from the package.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.Validate">
            <summary>
            IValidator Member
            Iterates through all contained validators, until the end is 
            reached or a failure occurs. If a cutstom error handler has
            been set then it is given the opportunity to override the 
            failure by setting IsValid true in its' event-args object.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.EvaluateIsValid">
            <summary>
            BaseValidator Member - begins the testing of the contained validators.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.SetControlIDFromUniqueId(System.String)">
            <summary>
            Determines and sets the validators-ID, based on the unique-id of the control to validate.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.ErrorHandler">
            <summary>
            Event provides a mechanism for external custom code to be informed of a 
            validation error, and also the option to override the failure if desired.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.ControlToValidateUniqueID">
            <summary>
            Sets or gets the unique-id of the control to validate
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.ErrorMessage">
            <summary>
            IValidator Member - returns the error message of the first failing contained 
            validator. Should be ignored if IsValid is true.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.IsValid">
            <summary>
            IValidator Member - returns true if all contained validators pass, or false for the first failure.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackage.Validators">
            <summary>
            A collection of validators; one for each rule assigned to the 
            control, held in the order that they were added.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackageResolver.GetValidationPackage(System.Web.UI.Control)">
            <summary>
            Iterates the Pages' Validators collection, until it finds the one for 
            the specified control and returns a reference to it, or null if not found. 
            Also may return null if the page is not ready to hold validators!
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.Validation.ValidationPackageResolver.GetAllValidationPackages(System.Web.UI.Page)">
            <summary>
            Returns all ValidationPackage objects contained in the 
            Pages' Validators collection, empty list if none found.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.RawStringJsonConverter">
            <summary>
            Custom Ektron.Newtonsoft JSON converter that serializing a string without quotes.  This is used when serializing a string property that
            outputs an object or function in JavaScript - for example, a JavaScript function.  To use this converter, you must decorate a serializable
            property with the following attribute: [JsonConverter(typeof(Ektron.Cms.Framework.UI.Controls.JqueryUI.RawStringJsonConverter))]
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase">
            <summary>
            CompositeDataBoundWidgetBase base class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.CreateChildControls(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Create child controls
            </summary>
            <param name="dataSource">IEnumerable datasource</param>
            <param name="dataBinding">databinding flag</param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.DataBind">
            <summary>
            Databing method
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.CreateDesignModeControls">
            <summary>
            Create Design mode controls
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.DataItem">
            <summary>
            Gets or sets a single item as the data source for databinding operations.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.AccessKey">
            <summary>
            Access key property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.ClientIDMode">
            <summary>
            ClientIDMode property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.TabIndex">
            <summary>
            Tab index property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.BackColor">
            <summary>
            Back color property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.BorderStyle">
            <summary>
            Border style property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.BorderWidth">
            <summary>
            Border with property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.Font">
            <summary>
            Font property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.ForeColor">
            <summary>
            Fore color property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.EnableTheming">
            <summary>
            Enable theming property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.SkinID">
            <summary>
            Skind ID property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.ToolTip">
            <summary>
            Tool tip property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.Height">
            <summary>
            Height Property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Core.CompositeDataBoundWidgetBase.Width">
            <summary>
            Width Property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Datepicker">
            <summary>
            Ektron UI Server control for rendering a Datepicker.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.CultureChangedHandler">
            <summary>
            Gets or sets the CultureChangedDelegate callback.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the contained DateField control is enabled.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.DisplayMode">
            <summary>
            Gets or sets the mark up mode for date picker. (Default or Inline)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.DisplayChangeMonth">
            <summary>
            Gets or sets whether or not a drop-down menu is displayed in the UI that changes which month is currently displayed.  (Default is false) 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.DisplayChangeYear">
            <summary>
            Gets or sets whether or not a drop-down menu is displayed in the UI that changes which year is currently displayed.  (Default is false) 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.MinDate">
            <summary>
            Gets or sets a minimum selectable date via a JavaScript Date object or as a string in the current cultural dateFormat, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '-1y -1m'), or null for no limit.  (Default is null)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.MaxDate">
            <summary>
            Get or set a maximum selectable date via a JavaScript Date object or as a string in the current cultural dateFormat, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +1w'), or null for no limit.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.NumberOfMonths">
            <summary>
            Get or set how many months to show at once. (Default is 1)
            <example>myDatepicker.NumberOfMonths = 3</example>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ErrorMessage">
            <summary>
            The validation error message, to be shown when the date-field's validation rule fails.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.OverrideDefaultCulture">
            <summary>
            Gets or sets the culture to use instead of the thread's current culture.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ShowWeek">
            <summary>
            Gets or sets whether or nto to show the week of the year.  The default calculation follows the ISO 8601 definition: the week starts on Monday, the first week of the year contains the first Thursday of the year. This means that some days from one year may be placed into weeks 'belonging' to another year.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ShowOn">
            <summary>
            Gets or sets how the datepicker appears. Options are when the field automatically when the field receives focus ("focus"), appear only when a button is clicked ("button"), or appear when either event takes place ("both").  (Default is "focus")
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ButtonImage">
            <summary>
            Gets or sets the URL for the popup button image. If set, buttonText becomes the alt value and is not directly displayed.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ButtonImageOnly">
            <summary>
            Get or set whether or not to place an image after the field to use as the trigger without it appearing on a button. (Default is false)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ShowAnim">
            <summary>
            Gets or sets the animation used to display the datepicker.  Options include "None", "show", "slideDown" or "fadeIn". (Default is "show").
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Options">
            <summary>
            Gets or sets the available options for the control. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ClientEvents">
            <summary>
            Gets or sets the client-side events for this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ValidationRules">
            <summary>
            Gets or sets the ValidationRules applied to this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.CausesValidation">
            <summary>
            Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ValidationGroup">
            <summary>
            Gets or sets the name of the validation group to which this validation control belongs.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Text">
            <summary>
            Gets or sets the Text of the control.
            </summary>
            <remarks>
            The text of the control to validate. This will be used for server-side 
            validation upon postback. This is also used to implement the 
            ValidationProperty attribute, which allows ASP.NET validation controls 
            to function. All validatable controls must wire up this property.
            </remarks>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ControlToValidate">
            <summary>
            References the control to be validated, which exists in the template. Used to access its' value, visible-state, etc.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Container">
            <summary>
            Allows any code that obtains an object that implements IValidatableObject, access to the container control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.Value">
            <summary>
            Get or set the control's DateTime value property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.LabelableControlID">
            <summary>
            Provides the Control ID for an associated label control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.CultureChangedDelegate">
            <summary>
            A simple delegate to allow a view to update any internal controls to the view whenever the Datepicker's culture is changed.
            </summary>
            <param name="cultureInfo">The culture being assigned by the delegate.</param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ShowOnOptions">
            <summary>
            Gets or sets options for the ShowOn property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.MarkupMode">
            <summary>
            Gets or sets the options for the DisplayMode property.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerBase.ShowAnimOptions">
            <summary>
            Gets or sets the options for the ShowAnim property. 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Options">
            <summary>
            Gets or sets the available options for the control. Options for this control are AutoOpen, Buttons, CloseOnEscape, CloseText, DialogClass, Disabled, Draggable, HasJson, Height, Hide, MaxHeight, MaxWidth, MinHeight, MinWidth, Modal, Position, Resizable, Show, Stack, Title, Width and Zindex.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.ClientEvents">
            <summary>
            Gets or sets the client-side events for this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.AutoOpen">
            <summary>
            Gets or sets the way dialog opens. True or False.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Draggable">
            <summary>
            Gets or sets the draggable property to true or false. True enables draggability, false disables draggability of the dialog.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Resizable">
            <summary>
            Gets or sets the boolean which enables or disables resizability of the dialog.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Modal">
            <summary>
            Gets or sets the boolean value which enables the or disables the page interaction. If set to true, the dialog will have modal behavior; other items on the page will be disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the dialog but above other page elements.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Height">
            <summary>
            Gets or sets the height of the dialog, in pixels.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Width">
            <summary>
            Gets or sets the width of the dialog, in pixels.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Stack">
            <summary>
            Gets or sets the Gets or sets the stack value for the control that specifies whether the dialog will stack on top of other dialogs. This will cause the dialog to move to the front of other dialogs when it gains focus. Default value - true
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.Zindex">
            <summary>
            Gets or sets the Gets or sets the starting z-index for the dialog. If the dialog is a modal dialog, the overlay layer's z-index will be one less than the dialog's starting z-index.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogBase.InUpdatePanel">
            <summary>
            Determines if this control is contained within an update panel.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.PagerBase.PageableControlID">
            <summary>
            Gets or sets the string value of the control Id whose results are to be paged.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.PagerBase.ResultsPerPage">
            <summary>
            Gets of sets the integer value for the results per page.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.PagerBase.TrailingPageCount">
            <summary>
            The maximum number of page-buttons to show starting with the current page button, and following the current page.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.PagerBase.LeadingPageCount">
            <summary>
            The maximum number of page-buttons to show before the current page button.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.DataBind">
            <summary>
            Called after setting DataSource, to create the data-bound child tab controls.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.BuildDataBoundChildControls">
            <summary>
            Builds the child tab controls, using the contents of the DataSource. 
            Do not call directly, but rather trigger this from DataBind, as other 
            house-keeping tasks must be taken care of.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.GetDataSource">
            <summary>
            Converts the DataSource into a type usable by the BuildDataBoundChildControls method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.AddTab(Ektron.Cms.Framework.UI.Controls.EktronUI.Tab)">
            <summary>
            Provides access to add a tab programatically. Use the Tab controls Text 
            and Content properties to set the tab-text and tab-contents respectively.
            </summary>
            <param name="newTab"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render begin tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render End tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.GetActiveTab">
            <summary>
            Call to obtain the currently selected Tab control.
            </summary>
            <returns>tab control</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.GetActiveTabIndex">
            <summary>
            Provides the active tabs index.
            </summary>
            <returns>the zero-based index of the currently selected tab</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.SetActiveTab(Ektron.Cms.Framework.UI.Controls.EktronUI.Tab)">
            <summary>
            Set active tab, by passing the Tab control that should be selected.
            </summary>
            <param name="tab">tab control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.SetActiveTab(System.Int32)">
            <summary>
            Selects the active tab by the given index.
            </summary>
            <param name="tabIndex">the zero-based index of the tab to select</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.SetActiveTab(System.String)">
            <summary>
            Set active tab by the tab-ID
            </summary>
            <param name="tabText">tab ID</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.ToolTip">
            <summary>
            ToolTip property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.Options">
            <summary>
            Gets or sets the available options for the control. Options for this control are AjaxOptions, Cache, Collapsible, Cookie, Disabled, Event, Fx, HasJson, PanelTemplate, Selected, Spinner and TabTemplate.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.ClientEvents">
            <summary>
            Gets or sets the client-side events for this control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.Selector">
            <summary>
            Gets or sets the jQuery selector used to initialize this control.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.Items">
            <summary>
            Provides access to the child Tab controls.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.ActiveTabIndex">
            <summary>
            Allows declaratively setting the zero-based index of the tab to be selected when rendered.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsBase.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the child tab controls.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.TextField">
            <summary>
            Ektron UI Server control for rendering a TextBox with Text content.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.TextField.DefaultTemplate">
            <summary>
            Gets the name of the Default Template used for rendering the TextField control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.TextField.Value">
            <summary>
            strongly typed value accessor
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionEvents">
            <summary>
            AccordionEvents class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WidgetPropertiesBase.HasJson">
            <summary>
            Gets a value indicating whether the control has a Json object.
            </summary>       
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionEvents.Create">
            <summary>
            This event is triggered when accordion is created.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionEvents.Change">
            <summary>
            This event is triggered every time the accordion changes. If the accordion is animated, the event will be triggered upon completion of the animation; otherwise, it is triggered immediately.
            $('.ui-accordion').bind('accordionchange', function(event, ui) {
                ui.newHeader // jQuery object, activated header
                ui.oldHeader // jQuery object, previous header
                ui.newContent // jQuery object, activated content
                ui.oldContent // jQuery object, previous content
            });
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionEvents.ChangeStart">
            <summary>
            This event is triggered every time the accordion starts to change.
            $('.ui-accordion').bind('accordionchangestart', function(event, ui) {
                ui.newHeader // jQuery object, activated header
                ui.oldHeader // jQuery object, previous header
                ui.newContent // jQuery object, activated content
                ui.oldContent // jQuery object, previous content
            });
            function(event, ui)
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions">
            <summary>
            AccordionOptions class
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Disabled">
            <summary>
            Disables (true) or enables (false) the accordion. Can be set when initialising (first creating) the accordion.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Active">
            <summary>
            Selector for the active element. Set to false to display none at start. Needs collapsible: true.
            Either...
            (1) Selector
            (2) Element
            (3) Boolean
            (4) Number
            Default value - first child
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Animated">
            <summary>
            Choose your favorite animation, or disable them (set to false). In addition to the default, 'bounceslide' and all defined easing methods are supported ('bounceslide' requires UI Effects Core).
            Default - 'slide'
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Collapsible">
            <summary>
            Whether all the sections can be closed at once. Allows collapsing the active section by the triggering event (click is the default).
            Default - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Event">
            <summary>
            The event on which to trigger the accordion.
            Default - click
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Header">
            <summary>
            Selector for the header element, applied via .find() on the main accordion element. 
            Content panels must be the sibling immediately after their associated headers.
            Default - '> li > :first-child,> :not(li):even'
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.HeightStyle">
            <summary>
            Controls the height of the accordion and each panel. Possible values: auto, fill, content
            Default - auto
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Icons">
            <summary>
            Icons to use for headers. Icons may be specified for 'header' and 'headerSelected', and we recommend using the icons native to the jQuery UI CSS Framework manipulated by jQuery UI ThemeRoller
            Default - {'header': 'ui-icon-triangle-1-e', 'headerSelected': 'ui-icon-triangle-1-s'}
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.Navigation">
            <summary>
            If set, looks for the anchor that matches location.href and activates it. Great for href-based state-saving. Use navigationFilter to implement your own matcher.
            Default - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AccordionOptions.NavigationFilter">
            <summary>
            Overwrite the default location.href-matching with your own matcher.
            Default - ''
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonEvents">
            <summary>
            Button Events class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonEvents.Create">
            <summary>
            This event is triggered when button is created.
            function(event, ui)
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Button.ButtonIcons">
            <summary>
            Constructor for the data class used for storing information about any icons associated with the button instance.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Button.ButtonIcons._primary">
            <summary>
            Gets the string value of the Primary property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Button.ButtonIcons._secondary">
            <summary>
            Gets the string value of the Secondary property.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Button.ButtonIcons.Primary">
            <summary>
            Gets or sets the Primary icon property.
            The primary icon is displayed by default on the left of the label text.
            Value for the primary and secondary properties must be a classname from the
            Ektron.Cms.Framework.UI.Icons.Themeroller enumeration.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Button.ButtonIcons.Secondary">
            <summary>
            Gets or sets the Secondary icon property.
            The secondary icon is displayed by default on the right of the label text
            Value for the primary and secondary properties must be a classname from the
            Ektron.Cms.Framework.UI.Icons.Themeroller enumeration.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarEvents">
            <summary>
            Button Events class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarEvents.Create">
            <summary>
            This event is triggered when button is created.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarEvents.Change">
            <summary>
            This event is triggered when the value of the progressbar changes.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarEvents.Complete">
            <summary>
            This event is triggered when the value of the progressbar changesThis event is triggered when the value of the progressbar reaches the maximum value of 100.
            function(event, ui)
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarOptions">
            <summary>
            Data class object for storing the various options for a given button isntance.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarOptions.#ctor">
            <summary>
            Constructor for the data class object that stores the various options for the button instance.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarOptions.Disabled">
            <summary>
            Gets or sets the boolean value that disables (true) or enables (false) the button. Can be set when initialising (first creating) the button.
            Default value - False
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ProgressbarOptions.Value">
            <summary>
            Gets or sets the the value of the progressbar.
            Getter:
            var value = $( ".selector" ).progressbar( "option", "value" );
            Setter:
            $( ".selector" ).progressbar( "option", "value", 37 );
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.TabData)">
            <summary>
            This constructor is used to add tabs during databinding
            </summary>
            <param name="tabData"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.AddPlaceholderToTemplate">
            <summary>
            Note: this is fragile, as it depends on the template to have a control 
            with the ID of "aspContents" (used for the accordion only), otherwise
            it will just add the placeholder to this tab controls collection (which
            renders properly for Tabs, but not for Accordion).
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render begin tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render End tag
            </summary>
            <param name="writer">html text writer</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.AddControl(System.Web.UI.Control)">
            <summary>
            Call to add controls to the template externally
            </summary>
            <param name="control">the control to add</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Index">
            <summary>
            index property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.IsSelected">
            <summary>
            Is Selected Property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Tabs">
            <summary>
            Tabs property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Content">
            <summary>
            Sets the Tab controls content when added programatically.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.ContentTemplate">
            <summary>
            Content Template Property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.PostBackTrigger">
            <summary>
            Post back trigger property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.CausesValidation">
            <summary>
            Causes validation property
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Click">
            <summary>
            Click event
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Command">
            <summary>
            Command event
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.CommandArgument">
            <summary>
            Command Argument property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.CommandName">
            <summary>
            command name property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.PostBackUrl">
            <summary>
            post back url event
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.Text">
            <summary>
            text property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Tab.ValidationGroup">
            <summary>
            Validation Group property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents">
            <summary>
            Autocomplete Events Class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Search">
            <summary>
            Before a request (source-option) is started, after minLength and delay are met. Can be canceled (return false), then no request will be started and no items suggested.
            function(input, inst)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Open">
            <summary>
            Before a request (source-option) is started, after minLength and delay are met. Can be canceled (return false), then no request will be started and no items suggested.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Focus">
            <summary>
            Triggered when the suggestion menu is opened.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Select">
            <summary>
            Triggered when an item is selected from the menu; ui.item refers to the selected item. The default action of select is to replace the text field's value with the value of the selected item. Canceling this event prevents the value from being updated, but does not prevent the menu from closing.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Close">
            <summary>
            When the list is hidden - doesn't have to occur together with a change.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteEvents.Change">
            <summary>
            When the list is hidden - doesn't have to occur together with a change.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteOptions.Disabled">
            <summary>
            Disables (true) or enables (false) the autocomplete. Can be set when initialising (first creating) the autocomplete.
            Default value - False
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteOptions.AppendTo">
            <summary>
            Which element the menu should be appended to.
            Default value - "body"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteOptions.Delay">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate itself. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.
            Default value - 300
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteOptions.MinLength">
            <summary>
            The minimum number of characters a user has to type before the Autocomplete activates. Zero is useful for local data with just a few items. Should be increased when there are a lot of items, where a single character would match a few thousand items.
            Default value - 1
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteOptions.Source">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, and look at the various demos.
            Default value - none, must be specified
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.AutocompleteData">
            <summary>
            Auto complete Data class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AutocompleteData.Label">
            <summary>
            Label property 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.AutocompleteData.Value">
            <summary>
            Value Property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.AutocompleteSourceRequestEventArgs">
            <summary>
            Exposes Date selected by user
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetButtonCollection">
            <summary>
            Button Set Button Collection 
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetButtonCollection.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetButtonCollection.Add(System.Web.UI.Control)">
            <summary>
            Add 
            </summary>
            <param name="button">control</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetButtonCollection.AddAt(System.Int32,System.Web.UI.Control)">
            <summary>
            Add At implementation
            </summary>
            <param name="index">index</param>
            <param name="button">button</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetButtonCollection.Item(System.Int32)">
            <summary>
            Button indexer
            </summary>
            <param name="i">index</param>
            <returns>an instance of this</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonSetOptions">
            <summary>
            Button Set options class
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions">
            <summary>
            Data class object for storing the various options for a given button isntance.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions.#ctor">
            <summary>
            Constructor for the data class object that stores the various options for the button instance.
            </summary>        
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions.Disabled">
            <summary>
            Gets or sets the boolean value that disables (true) or enables (false) the button. Can be set when initialising (first creating) the button.
            Default value - False
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions.Text">
            <summary>
            Gets or sets whether to show any text - when set to false (display no text), icons (see icons option) must be enabled, otherwise it will be ignored.
            Default value - True
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions.Icons">
            <summary>
            Gets or sets the icons to display, with or without text (see text option). The primary icon is displayed by default on the left of the label text, the secondary by default is on the right. Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". For using only one icon: icons: {primary:'ui-icon-locked'}. For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            Default value - True
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.ButtonOptions.Label">
            <summary>
            Gets or sets the text to show on the button. When not specified (null), the element's html content is used, or its value attribute when it's an input element of type submit or reset; or the html content of the associated label element if its an input of type radio or checkbox
            Default value - HTML content of the button, or value attribute
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Column">
            <summary>
            Column class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.Span">
            <summary>
            Use these classes to set the width of a column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.Push">
            <summary>
            Use this on an element to push it into the next column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.Pull">
            <summary>
            Use this on an element to pull it into the previous column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.Append">
            <summary>
            Add these to a column to add empty columns to the right.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.Prepend">
            <summary>
            Add these to a column to add empty columns to the left.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.ColumnBorder">
            <summary>
            Shows a border with more whitespace, spans one column.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.CssClass">
            <summary>
            Gets or sets the CssClass for the control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.IsLast">
            <summary>
            Is Last property
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Column.ContentTemplate">
            <summary>
            Content template property
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DateChangedEventArgs">
            <summary>
            Exposes Date selected by user
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerEvents.BeforeShow">
            <summary>
            Can be a function that takes an input field and current datepicker instance and returns an options object to update the datepicker with. It is called just before the datepicker is displayed.
            function(input, inst)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerEvents.BeforeShowDay">
            <summary>
            The function takes a date as a parameter and must return an array with [0] equal to true/false indicating whether or not this date is selectable, [1] equal to a CSS class name(s) or '' for the default presentation, and [2] an optional popup tooltip for this date. It is called for each day in the datepicker before it is displayed.
            function(date)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerEvents.OnChangeMonthYear">
            <summary>
            Allows you to define your own event when the datepicker moves to a new month and/or year. The function receives the selected year, month (1-12), and the datepicker instance as parameters. this refers to the associated input field.
            function(year, month, inst)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerEvents.OnClose">
            <summary>
            Allows you to define your own event when the datepicker is closed, whether or not a date is selected. The function receives the selected date as text ('' if none) and the datepicker instance as parameters. this refers to the associated input field.
            function(dateText, inst)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerEvents.OnSelect">
            <summary>
            Allows you to define your own event when the datepicker is selected. The function receives the selected date as text and the datepicker instance as parameters. this refers to the associated input field.
            function(dateText, inst)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.Disabled">
            <summary>
            Disables (true) or enables (false) the datepicker. Can be set when initialising (first creating) the datepicker.
            Default value - False
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.AltField">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date from the datepicker. Use the altFormat setting to change the format of the date within this field. Leave as blank for no alternate field.
            Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.AltFormat">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to be shown to the user for selection purposes, while a different format is actually sent behind the scenes. For a full list of the possible formats see the formatDate function
            Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.AppendText">
            <summary>
            The text to display after each date field, e.g. to show the required format.
            Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.AutoSize">
            <summary>
            Set to true to automatically resize the input field to accomodate dates in the current dateFormat.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ButtonImage">
            <summary>
            The URL for the popup button image. If set, buttonText becomes the alt value and is not directly displayed.
            Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ButtonImageOnly">
            <summary>
            Set to true to place an image after the field to use as the trigger without it appearing on a button.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ButtonText">
            <summary>
            The text to display on the trigger button. Use in conjunction with showOn equal to 'button' or 'both'.
            Default value - "..."
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.CalculateWeek">
            <summary>
            A function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.
            Default value - $.datepicker.iso8601Week
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ChangeMonth">
            <summary>
            Allows you to change the month by selecting from a drop-down list. You can enable this feature by setting the attribute to true.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ChangeYear">
            <summary>
            Allows you to change the year by selecting from a drop-down list. You can enable this feature by setting the attribute to true. Use the yearRange option to control which years are made available for selection.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.CloseText">
            <summary>
            The text to display for the close link. This attribute is one of the regionalisation attributes. Use the showButtonPanel to display this button.
            Default value - "Done"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ConstrainInput">
            <summary>
            When true entry in the input field is constrained to those characters allowed by the current dateFormat.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.Culture">
            <summary>
            The name of the culture to use for the calendar.
            Default value - "en-US"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.CurrentText">
            <summary>
            The text to display for the current day link. This attribute is one of the regionalisation attributes. Use the showButtonPanel to display this button.
            Default value - "Today"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.DateFormat">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the regionalisation attributes. For a full list of the possible formats see the formatDate function.
            Default value - "mm/dd/yy"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.DayNames">
            <summary>
            The list of long day names, starting from Sunday, for use as requested via the dateFormat setting. They also appear as popup hints when hovering over the corresponding column headings. This attribute is one of the regionalisation
            Deafult value - ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.DayNamesMin">
            <summary>
            The list of minimised day names, starting from Sunday, for use as column headers within the datepicker. This attribute is one of the regionalisation attributes.
            Default value - ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.DayNamesShort">
            <summary>
            The list of abbreviated day names, starting from Sunday, for use as requested via the dateFormat setting. This attribute is one of the regionalisation attributes.
            Default value - ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.DefaultDate">
            <summary>
            Set the date to highlight on first opening if the field is blank. Specify either an actual date via a Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.Duration">
            <summary>
            Control the speed at which the datepicker appears, it may be a time in milliseconds or a string representing one of the three predefined speeds ("slow", "normal", "fast").
            Default value - "normal"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.FirstDay">
            <summary>
            Set the first day of the week: Sunday is 0, Monday is 1, ... This attribute is one of the regionalisation attributes.
            Default value - 0
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.GoToCurrent">
            <summary>
            When true the current day link moves to the currently selected date instead of today.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.HideIfNoPrevNext">
            <summary>
            Normally the previous and next links are disabled when not applicable (see minDate/maxDate). You can hide them altogether by setting this attribute to true.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.IsRTL">
            <summary>
            True if the current language is drawn from right to left. This attribute is one of the regionalisation attributes.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.MaxDate">
            <summary>
            Set a maximum selectable date via a Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +1w'), or null for no limit.
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.MinDate">
            <summary>
            Set a minimum selectable date via a Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '-1y -1m'), or null for no limit.
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.MonthNames">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting. This attribute is one of the regionalisation attributes.
            Default value - ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] 
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.MonthNamesShort">
            <summary>
            The list of abbreviated month names, as used in the month header on each datepicker and as requested via the dateFormat setting. This attribute is one of the regionalisation attributes.
            Default value - ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.NavigationAsDateFormat">
            <summary>
            When true the formatDate function is applied to the prevText, nextText, and currentText values before display, allowing them to display the target month names for example.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.NextText">
            <summary>
            The text to display for the next month link. This attribute is one of the regionalisation attributes. With the standard ThemeRoller styling, this value is replaced by an icon.
            Default value - "Next"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.NumberOfMonths">
            <summary>
            Set how many months to show at once.
            Default value - 1
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.PrevText">
            <summary>
            The text to display for the previous month link. This attribute is one of the regionalisation attributes. With the standard ThemeRoller styling, this value is replaced by an icon.
            Default value - "Prev"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.SelectOtherMonths">
            <summary>
            When true days in other months shown before or after the current month are selectable. This only applies if showOtherMonths is also true.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShortYearCutoff">
            <summary>
            Set the cutoff year for determining the century for a date (used in conjunction with dateFormat 'y'). If a numeric value (0-99) is provided then this value is used directly. If a string value is provided then it is converted to a number and added to the current year. Once the cutoff year is calculated, any dates entered with a year value less than or equal to it are considered to be in the current century, while those greater than it are deemed to be in the previous century.
            Default value - "+10"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowAnim">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' (the default), 'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, or '' for no animation.
            Default value - "show"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowButtonPanel">
            <summary>
            Whether to show the button panel.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowCurrentAtPos">
            <summary>
            Specify where in a multi-month display the current month shows, starting from 0 at the top/left.
            Default value - 0
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowMonthAfterYear">
            <summary>
            Whether to show the month after the year in the header. This attribute is one of the regionalisation attributes.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowOn">
            <summary>
            Have the datepicker appear automatically when the field receives focus ('focus'), appear only when a button is clicked ('button'), or appear when either event takes place ('both').
            Default value - "focus"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowOptions">
            <summary>
            If using one of the jQuery UI effects for showAnim, you can provide additional settings for that animation via this option.
            Default value - {}
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowOtherMonths">
            <summary>
            Display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use selectOtherMonths.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.ShowWeek">
            <summary>
            When true a column is added to show the week of the year. The calculateWeek option determines how the week of the year is calculated. You may also want to change the firstDay option.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.StepMonths">
            <summary>
            Set how many months to move when clicking the Previous/Next links.
            Default value - 1
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.WeekHeader">
            <summary>
            The text to display for the week of the year column heading. This attribute is one of the regionalisation attributes. Use showWeek to display this column.
            Default value - "Wk"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.YearRange">
            <summary>
            Control the range of years displayed in the year drop-down: either relative to today's year (-nn:+nn), relative to the currently selected year (c-nn:c+nn), absolute (nnnn:nnnn), or combinations of these formats (nnnn:-nn). Note that this option only affects what appears in the drop-down, to restrict which dates may be selected use the minDate and/or maxDate options.
            Default value - "c-10:c+10"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DatepickerOptions.YearSuffix">
            <summary>
            Additional text to display after the year in the month headers. This attribute is one of the regionalisation attributes.
            Default value - ""
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents">
            <summary>
            Dialog Events class
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Create">
            <summary>
            This event is triggered when dialog is created.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.BeforeClose">
            <summary>
            This event is triggered when a dialog attempts to close. If the beforeClose event handler (callback function) returns false, the close will be prevented.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Open">
            <summary>
            This event is triggered when dialog is opened.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Focus">
            <summary>
            This event is triggered when the dialog gains focus.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.DragStart">
            <summary>
            This event is triggered at the beginning of the dialog being dragged.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Drag">
            <summary>
            This event is triggered when the dialog is dragged.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.DragStop">
            <summary>
            Supply a callback function to handle the dragStop event as an init option.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.ResizeStart">
            <summary>
            This event is triggered at the beginning of the dialog being resized.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Resize">
            <summary>
            This event is triggered when the dialog is resized.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.ResizeStop">
            <summary>
            This event is triggered after the dialog has been resized.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogEvents.Close">
            <summary>
            This event is triggered when the dialog is closed.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Disabled">
            <summary>
            Gets or sets the disable property for the control. Disables (true) or enables (false) the dialog. Can be set when initialising (first creating) the dialog. Default value - False
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.AutoOpen">
            <summary>
            Gets or sets the boolean value for AutoOpen property. When autoOpen is true the dialog will open automatically when dialog is called. If false it will stay hidden until .dialog("open") is called on it. Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Buttons">
            <summary>
            Gets or sets the string value of button for this control. Specifies which buttons should be displayed on the dialog. The property key is the text of the button. The value is the callback function for when the button is clicked. The context of the callback is the dialog element; if you need access to the button, it is available as the target of the event object. Default value - "{}"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.CloseOnEscape">
            <summary>
            Gets or sets the value indicating whether the dialog should close when it has focus and the user presses the esacpe (ESC) key. Default value - true
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.CloseText">
            <summary>
            Gets or sets text for the close button. Note that the close text is visibly hidden when using a standard theme. Default value - "close"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.DialogClass">
            <summary>
            Gets or sets which class name(s) will be added to the dialog, for additional theming. Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Draggable">
            <summary>
            Gets or sets the draggablity for the control. If set to true, the dialog will be draggable will be draggable by the titlebar. Default value - "true"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Height">
            <summary>
            Gets or sets the height of the dialog, in pixels. Specifying 'auto' is also supported to make the dialog adjust based on its content. Default value - "auto"
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Hide">
            <summary>
            Gets or sets the effect to be used when the dialog is closed. Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.MaxHeight">
            <summary>
            Gets or sets the maximum height to which the dialog can be resized, in pixels. Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.MaxWidth">
            <summary>
            Gets or sets the maximum width to which the dialog can be resized, in pixels. Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.MinHeight">
            <summary>
            Gets or sets the minimum height to which the dialog can be resized, in pixels. Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.MinWidth">
            <summary>
            Gets or sets the minimum width to which the dialog can be resized, in pixels. Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Modal">
            <summary>
            Gets or sets the boolean value if set to true, the dialog will have modal behavior; other items on the page will be disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the dialog but above other page elements. Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Position">
            <summary>
            Gets or sets the position where the dialog should be displayed. Possible values:
            1) a single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'.
            2) an array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100])
            3) an array containing x,y position string values (e.g. ['right','top'] for top right corner). Default value - center
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Resizable">
            <summary>
            Gets or sets the resizability of the control. If set to true, the dialog will be resizeable. Default value - true
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Show">
            <summary>
            Gets or sets string value of the effect to be used when the dialog is opened. Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Stack">
            <summary>
            Gets or sets the stack value for the control that specifies whether the dialog will stack on top of other dialogs. This will cause the dialog to move to the front of other dialogs when it gains focus. Default value - true
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Title">
            <summary>
            Gets or sets the title value for the control that specifies the title of the dialog. Any valid HTML may be set as the title. The title can also be specified by the title attribute on the dialog source element. Default value - ""
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Width">
            <summary>
            Gets or sets the width of the dialog, in pixels.
            Default value - 300
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.DialogOptions.Zindex">
            <summary>
            Gets or sets the intger value for the control that initializes a dialog with the zIndex option specified. Default value - 1000
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Name">
            <summary>
            The name of the cookie.  This is always set to the tabs control's ClientID.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Raw">
            <summary>
            Determines whether the cookie value will be encoded or not when written to the cookie.  Default is to write the raw (unencoded) value to the cookie.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Expires">
            <summary>
            An integer specifying the expiration date from now on in days.  
            If a negative value is specified, the cookie will be deleted.
            If set to null or omitted, the cookie will be a session cookie and will not be retained
            when the the browser exits.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Path">
            <summary>
            The value of the path atribute of the cookie (default: path of page that created the cookie).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Domain">
            <summary>
            he value of the domain attribute of the cookie (default: domain of page that created the cookie).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptionsCookie.Secure">
            <summary>
            If true, the secure attribute of the cookie will be set and the cookie transmission will
            require a secure protocol (like HTTPS).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Create">
            <summary>
            This event is triggered when tabs is created.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Select">
            <summary>
            This event is triggered when clicking a tab.
            NOTE: The following syntax must be used for this event - 'function(event, ui){ MyTabsOnSelectFunction(event, ui); }'  From this function, return true to allow tab switch and false to cancel tab switch.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Load">
            <summary>
            This event is triggered when clicking a tab.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Show">
            <summary>
            This event is triggered after the content of a remote tab has been loaded.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Add">
            <summary>
            This event is triggered when a tab is shown.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Remove">
            <summary>
            This event is triggered when a tab is added.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Enable">
            <summary>
            This event is triggered when a tab is removed.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsEvents.Disable">
            <summary>
            This event is triggered when a tab is enabled.
            function(event, ui)
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Disabled">
            <summary>
            Either...
            (1) Disables (true) or enables (false) the tabs. Can be set when initialising (first creating) the tabs (default value - false), or
            (2) An array containing the position of the tabs (zero-based index) that should be disabled on initialization (default value - []).
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.AjaxOptions">
            <summary>
            Additional Ajax options to consider when loading tab content (see $.ajax).
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Cache">
            <summary>
            Whether or not to cache remote tabs content, e.g. load only once or with every click. Cached content is being lazy loaded, e.g once and only once for the first click. Note that to prevent the actual Ajax requests from being cached by the browser you need to provide an extra cache: false flag to ajaxOptions.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Collapsible">
            <summary>
            Set to true to allow an already selected tab to become unselected again upon reselection.
            Default value - false
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Cookie">
            <summary>
            Store the latest selected tab in a cookie. The cookie is then used to determine the initially selected tab if the selected option is not defined. Requires cookie plugin. The object needs to have key/value pairs of the form the cookie plugin expects as options. Available options (example): { expires: 7, path: '/', domain: 'jquery.com', secure: true }. Since jQuery UI 1.7 it is also possible to define the cookie name being used via name property.
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Event">
            <summary>
            The type of event to be used for selecting a tab.
            Default value - 'click'
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Fx">
            <summary>
            Enable animations for hiding and showing tab panels. The duration option can be a string representing one of the three predefined speeds ("slow", "normal", "fast") or the duration in milliseconds to run an animation (default is "normal").
            Default value - null
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.PanelTemplate">
            <summary>
            HTML template from which a new tab panel is created in case of adding a tab with the add method or when creating a panel for a remote tab on the fly.
            Default value - '<div></div>'
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Selected">
            <summary>
            Zero-based index of the tab to be selected on initialization. To set all tabs to unselected pass -1 as value.
            Default value - '<div></div>'
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.Spinner">
            <summary>
            The HTML content of this string is shown in a tab title while remote content is loading. Pass in empty string to deactivate that behavior. An span element must be present in the A tag of the title, for the spinner content to be visible.
            Default value - '<em>Loading$#8230;</em>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabsOptions.TabTemplate">
            <summary>
            HTML template from which a new tab is created and added. The placeholders #{href} and #{label} are replaced with the url and tab label that are passed as arguments to the add method.
            Default value - '<em>Loading$#8230;</em>
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabManager.Add(Ektron.Cms.Framework.UI.Controls.EktronUI.Tab)">
            <summary>
            Add a new tab.
            </summary>
            <param name="tab">the Tab control to add</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabManager.SelectTab(System.String)">
            <summary>
            Set active tab by the tab-ID
            </summary>
            <param name="tabText">tab ID</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabManager.Items">
            <summary>
            Provides access to the Tab controls.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabManager.SelectedTab">
            <summary>
            Set or obtain the selected tab.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TabManager.SelectedTabIndex">
            <summary>
            Selects the active tab by the given index.
            </summary>
            <param name="tabIndex">the zero-based index of the tab to select</param>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Position">
            <summary>
            How and where to display a jQuery-based widget relative to an element.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Position.At">
            <summary>
            Gets or sets the position on the reference element to align the positioning element against.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of where on the anchor to align the tooltip against (left|right|center top|bottom|center
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Position.Collision">
            <summary>
            Gets or sets the alternative position, for each axis, for when the positioning element overflows its container 
            element in some direction.
            This accepts a single value or a pair for horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none"
            "flip" will use the mirror position, (e.g. "left" instead of "right"); if flipping results in less of the 
            element being visible, the original position will be used.
            </summary>
            <value>
            Any combination of 1 or 2 instances of "flip" "fit" flipfit" and "none"
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Position.My">
            <summary>
            Gets or sets the position on the positioning element to align with the reference element.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of which side of the tooltip to align to its anchor (left|right|center top|bottom|center
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder">
            <summary>
            Builds a jQuery tooltip code block.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder"/> class
            and its members.</para>
            <para>Default will render all title attributes in the document.</para>
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.GetTooltip">
            <summary>
            Gets the tooltip JavaScript.
            </summary>
            <returns>String of JavaScript to run on document ready.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.Hide">
            <summary>
            Gets or sets string value of the effect to be used when the tooltip appears. Default value - null
            </summary>
            <value>
            The effect to hide.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.PositionAt">
            <summary>
            Gets or sets the position on the anchor to align the tooltip against.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of where on the anchor to align the tooltip against.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.PositionCollision">
            <summary>
            Gets or sets the alternative position, for each axis, for when the tooltip overflows its container element in 
            some direction.
            This accepts a single value or a pair for horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none"
            "flip" will use the mirror position, (e.g. "left" instead of "right"); if flipping results in less of the 
            element being visible, the original position will be used.
            </summary>
            <value>
            Any combination of 1 or 2 instances of "flip" "fit" flipfit" and "none"
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.PositionMy">
            <summary>
            Gets or sets the position on the tooltip being positioned to align with its anchor.
            A single value such as "right" will default to "right center", "top" will default to "center top" 
            (following CSS convention). The horizontal and vertical values may also include offsets, e.g., "right+10 top-25%" 
            </summary>
            <value>
            The jQuery position value of which side of the tooltip to align to its anchor.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.Selector">
            <summary>
            Gets or sets the jQuery selector.
            </summary>
            <value>
            The jQuery selector, document by default.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.Show">
            <summary>
            Gets or sets string value of the effect to be used when the tooltip appears. Default value - null
            </summary>
            <value>
            The effect to show.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.Text">
            <summary>
            Gets or sets the text of the tooltip.
            </summary>
            <value>
            The text of the tooltip.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipBuilder.Options">
            <summary>
            <para>Gets or sets the available options for the control.</para>
            <para>
            Options for this control are .</para>
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions">
            <summary>
            Options to configure the tooltip, which converts to JSON that is compatible with
            the tooltip options in jQuery.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions"/> class
            and its members.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.Content">
            <summary>
            Gets or sets the content of the tooltip as HTML. Default value - null
            </summary>
            <value>
            The content of the tooltip as HTML.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.Hide">
            <summary>
            Gets or sets the effect to be used when the tooltip disappears. Default value - null
            </summary>
            <value>
            The effect to hide.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.Position">
            <summary>
            Gets or sets the position of where to display the tooltip relative to its anchor.
            </summary>
            <value>
            The position of the tooltip.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.Show">
            <summary>
            Gets or sets string value of the effect to be used when the tooltip appears. Default value - null
            </summary>
            <value>
            The effect to show.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TooltipOptions.Track">
            <summary>
            Gets or sets a value indicating whether the tooltip should track 
            (follow) the mouse. Default value - false
            </summary>
            <value>
            <c>true</c> to track the mouse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FolderTreeDataSource.GetTree(Ektron.Cms.Common.TreeCriteria,Ektron.Cms.Common.EkEnumeration.OrderByDirection,Ektron.Cms.Common.FolderProperty)">
            <summary>
            used to get the tree data structure on gets and ajax callbacks
            </summary>
            <param name="treeCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.FolderTreeDataSource.GetTree(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},Ektron.Cms.Common.EkEnumeration.OrderByDirection,Ektron.Cms.Common.FolderProperty)">
            <summary>
            Used to get the tree structure on postbacks
            </summary>
            <param name="rootId"></param>
            <param name="countTable"></param>
            <returns></returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.MenuTreeDataSource.GetTree(Ektron.Cms.Common.TreeCriteria)">
            <summary>
            used to get the tree data structure on gets and ajax callbacks
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TaxonomyTreeDataSource.GetTree(Ektron.Cms.Common.TreeCriteria,System.Boolean,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.OrderByDirection,Ektron.Cms.Organization.TaxonomyProperty,Ektron.Cms.Organization.TaxonomyItemProperty)">
            <summary>
            used to get the tree data structure on gets and ajax callbacks
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.TaxonomyTreeDataSource.GetTree(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean,Ektron.Cms.Common.EkEnumeration.TaxonomyType,Ektron.Cms.Common.EkEnumeration.OrderByDirection,Ektron.Cms.Organization.TaxonomyProperty,Ektron.Cms.Organization.TaxonomyItemProperty,Ektron.Cms.TaxonomyData)">
            <summary>
            Used to get the tree structure on postbacks
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuBaseDataVisitor.GetCurrentSelectedMenuItem">
            <summary>
            Get the Current MenuItem selected.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuBaseDataVisitor.IsSelectedByNavigationURL(System.String)">
            <summary>
            Check whether Current URL matches with Navigation URL of the object (eg. URL link in menu or External Menu item).
            </summary>
            <param name="navigationURL"> URL </param>
            <returns>Bool </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuBaseDataVisitor.AddSitePathToNavigationURL(System.String)">
            <summary>
            Navigation URL
            </summary>
            <param name="navigationURL">Navigation URL</param>
            <returns>Correct URL</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuBaseDataVisitor.IsItemSelected(System.String)">
            <summary>
            Check whether Current Content ID matches with menu Item ID.
            </summary>
            <param name="menuItemID">Item ID</param>
            <returns>bool</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.MenuBaseDataVisitor.ContentManager">
            <summary>
            Supports GetCurrentSelectedMenuItem() by providing access to an implementation of IContentManager.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.DeclarativeTreeItem`2.OnDataBinding(System.EventArgs)">
            <summary>
            When DataBinding, converts declarative node into treenode,
            and adds it to the parents' node collection.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.DeclarativeTreeItem`2.InnerNode">
            <summary>
            The underlying data-storage object
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Summary">
            <summary>
            A server control to act as a summary step within a wizard.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep">
            <summary>
            Abstract class for server controls which can act as steps within a Wizard.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView">
            <summary>
            The interface required to be displayed within a Wizard
            server control.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep">
            <summary>
            The interface inherent to any wizard step (i.e. managed or summary).
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.Activate">
            <summary>
            Activates this step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.Complete">
            <summary>
            Completes this step.
            </summary>
            <returns>True if the step completed successfully.</returns>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.Finish">
            <summary>
            <para>Occurs when the step finishes.  This is when information from the
            step may be validated.</para>
            <para>This event must be able to repeat without corrupting data and 
            cannot assume that a step that starts will necessarily remain current.</para>
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.Start">
            <summary>
            <para>Occurs when the step starts.  This provides an opportunity prepare
            the step for being validated (e.g. reflecting changes from earlier
            steps, changing field visibility, etc).</para>
            <para>This event must be able to repeat without corrupting data and 
            cannot assume that a step that starts will necessarily remain current.</para>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:IWizardStep"/> 
            is disabled and should be excluded from the wizard process.
            </summary>
            <value>
            <c>true</c> if disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep.ID">
            <summary>
            Gets or sets the unique ID for this step within the wizard.
            </summary>
            <value>
            The ID of the step.
            </value>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.CurrentRender">
            <summary>
            <para>Occurs when the step is rendered to the page.  This is when operations
            which only need to occur when the step is display may be performed.</para>
            <para>This event is only triggered on the current step at the time when
            the wizard is being rendered.</para>
            <para>This event must be able to repeat without corrupting data</para>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.IsComplete">
            <summary>
            Gets a value indicating whether this step is complete.
            </summary>
            <value>
            <c>true</c> if this step is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.IsCurrent">
            <summary>
            Gets or sets a value indicating whether this step is current.
            </summary>
            <value>
            <c>true</c> if this step is current; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.IsPending">
            <summary>
            Gets a value indicating whether this step is pending.
            </summary>
            <value>
            <c>true</c> if this step is pending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.IsSummary">
            <summary>
            Gets or sets a value indicating whether this step is summary.
            </summary>
            <value>
            <c>true</c> if this step is summary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.IsValid">
            <summary>
            Gets a value indicating whether this step passes validation.
            </summary>
            <value>
              <c>true</c> if this step passes validation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.Name">
            <summary>
            Gets or sets the name to display for this step.
            </summary>
            <value>
            The name to display for this step.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.Optional">
            <summary>
            <para>Gets or sets a value indicating whether this <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView"/> 
            is optional.</para>
            <para>This is a cue to allow the user to attempt to skip past it.  The step's
            complete event can still prevent a user from bypassing this step.</para>
            </summary>
            <value>
            <c>true</c> if optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.ShowStatus">
            <summary>
            Gets a value indicating whether to show the status for this step.
            </summary>
            <value>
              <c>true</c> if showing the step's status; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.Status">
            <summary>
            <para>Gets or sets a short status message to display with the step's 
            name.</para>
            <para>This is intended to display a reminder of a step's result.  
            Ex: A step "Choose Address" updates its status to "Main St." to
            reflect the choice the user made.
            </para>
            </summary>
            <value>
            The status of the step.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView.ValidationGroup">
            <summary>
            Gets or sets the validation group for the step.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.isCompleteViewStateKey">
            <summary>
            View state key for whether the step is complete
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.disabledViewStateKey">
            <summary>
            View state key for whether the step is disabled
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.idViewStateKey">
            <summary>
            View state key for the step's ID
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.nameViewStateKey">
            <summary>
            View state key for the step's name
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.optionalViewStateKey">
            <summary>
            View state key for whether the step is optional
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.statusViewStateKey">
            <summary>
            View state key for the step's status
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.validationGroupViewStateKey">
            <summary>
            View state key for the step's validation group
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Activate">
            <summary>
            Activates this step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Complete">
            <summary>
            Completes this step.
            </summary>
            <returns>True if the step completed successfully.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.InstantiateIn(System.Web.UI.Control)">
            <summary>
            <para>When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object 
            that child controls and templates belong to. These child controls are in turn defined 
            within an inline template.</para>
            <para>Defines the step itself as belonging to the<see cref="T:System.Web.UI.Control"/> 
            object.  The step's ContentTemplate in turn belongs to it.</para>
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.OnCurrentRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Render"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.OnFinish(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardCompleteEventArgs)">
            <summary>
            Raises the <see cref="E:Finish"/> event.
            </summary>
            <param name="e">The <see cref="!:Ektron.Cms.Framework.UI.Controls.EktronUI.WizardCompleteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.OnStart(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Start"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.SetComplete(System.Boolean)">
            <summary>
            Sets whether the step is complete.
            </summary>
            <param name="complete">if set to <c>true</c> sets the step as complete.</param>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.CurrentRender">
            <summary>
              <para>Occurs when the step is rendered to the page.  This is when operations
            which only need to occur when the step is display may be performed.</para>
              <para>This event is only triggered on the current step at the time when
            the wizard is being rendered.</para>
              <para>This event must be able to repeat without corrupting data</para>
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Finish">
            <summary>
              <para>Occurs when the step finishes.  This is when information from the
            step may be validated.</para>
              <para>This event must be able to repeat without corrupting data and
            cannot assume that a step that starts will necessarily remain current.</para>
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Start">
            <summary>
              <para>Occurs when the step starts.  This provides an opportunity prepare
            the step for being validated (e.g. reflecting changes from earlier
            steps, changing field visibility, etc).</para>
              <para>This event must be able to repeat without corrupting data and
            cannot assume that a step that starts will necessarily remain current.</para>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Step"/>
            is disabled and should be excluded from the wizard process.
            </summary>
            <value>
              <c>true</c> if disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.ID">
            <summary>
            <para>Gets or sets the programmatic identifier assigned to the server control.</para>
            <para>This is also the unique ID for this step within the wizard.</para>
            </summary>
            <returns>The ID of the step and the programmatic identifier assigned to the control.</returns>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.IsComplete">
            <summary>
            Gets a value indicating whether this step is complete.
            </summary>
            <value>
              <c>true</c> if this step is complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.IsCurrent">
            <summary>
            <para>Gets or sets a value indicating whether this step is current.</para>
            <para>This value is set externally by a manager handling the wizard
            process.</para>
            </summary>
            <value>
            <c>true</c> if this step is current; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.IsPending">
            <summary>
            Gets a value indicating whether this step is pending.
            </summary>
            <value>
              <c>true</c> if this step is pending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.IsSummary">
            <summary>
            Gets or sets a value indicating whether this step is summary.
            </summary>
            <value>
            <c>true</c> if this step is summary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.IsValid">
            <summary>
            Gets a value indicating whether this step passes validation.
            </summary>
            <value>
              <c>true</c> if this step passes validation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Name">
            <summary>
            Gets or sets the name to display for this step.
            </summary>
            <value>
            The name to display for this step.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Optional">
            <summary>
              <para>Gets or sets a value indicating whether this <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Step"/>
            is optional.</para>
              <para>This is a cue to allow the user to attempt to skip past it.  The step's
            complete event can still prevent a user from bypassing this step.</para>
            </summary>
            <value>
              <c>true</c> if optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.ShowStatus">
            <summary>
            Gets a value indicating whether to show the status for this step.
            </summary>
            <value>
            	<c>true</c> if showing the step's status; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.Status">
            <summary>
              <para>Gets or sets a short status message to display with the step's
            name.</para>
              <para>This is intended to display a reminder of a step's result.
            Ex: A step "Choose Address" updates its status to "Main St." to
            reflect the choice the user made.
              </para>
            </summary>
            <value>
            The status of the step.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.StepTemplate">
            <summary>
            Gets or sets the template for the step.
            </summary>
            <value>
            The step template.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStep.ValidationGroup">
            <summary>
            Gets or sets the validation group for the step.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Summary.IsSummary">
            <summary>
            Gets or sets a value indicating whether this step is summary.
            </summary>
            <value>
              <c>true</c> if this step is summary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Step">
            <summary>
            A server control which acts as a step within a wizard.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Step.IsSummary">
            <summary>
            Gets or sets a value indicating whether this step is summary.
            </summary>
            <value>
              <c>true</c> if this step is summary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard">
            <summary>
            Server control to provide a framework for building wizard interfaces.
            </summary>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase">
            <summary>
            Provides the properties, events and methods necessary for
            implementing a wizard server control.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.currentStepIdViewStateKey">
            <summary>
            View state key for storing/retrieving the current step's ID
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.startedViewStateKey">
            <summary>
            View state key for whether the wizard has been started
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.steps">
            <summary>
            The steps read from the wizard's child controls.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.summary">
            <summary>
            The summary read from the wizard's child controls.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Complete">
            <summary>
            Completes the wizard.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Exit">
            <summary>
            Exits the wizard.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Go(System.String)">
            <summary>
            Goes to the specified step.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.InstantiateIn(System.Web.UI.Control)">
            <summary>
            <para>When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that 
            child controls and templates belong to. These child controls are in turn defined within an 
            inline template.</para>
            <para>This defines the children of the steps as belonging to the specified 
            <see cref="T:System.Web.UI.Control"/> object.</para>
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances 
            of controls from steps' inline templates.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Next">
            <summary>
            Advances the wizard to the next step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Previous">
            <summary>
            Returns the wizard to the previous step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.OnCancel(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Cancel"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.OnStart(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Start"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.OnPreRender(System.EventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.</para>
            <para>Enforces unique visibility of the current step.</para>
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Cancel">
            <summary>
            <para>Occurs when the user requests to cancel the wizard.  This
            event is to provide logic for how to handle that request.</para>
            <para>Initialized to null for testing whether it has been set.</para>
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Start">
            <summary>
            <para>Occurs when the wizard starts.  This provides an opportunity prepare
            the first step before it is activated or any bootstrapping necessary.</para>
            <para>This event only occurs once UNLIKE the start event of each step.</para>
            <para>Initialized to an anonymous delegate to remove need for null-check.</para>
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Finish">
            <summary>
            <para>Occurs when the wizard finishes.  This is when information from the
            wizard may finally be processed.</para>
            <para>This event only occurs once unless WizardCompleteEventArgs.Cancel
            is true and the user chooses to reattempt to finish.</para>
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.CurrentStep">
            <summary>
            Gets the current step from the manager as a Step control.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.CanCancel">
            <summary>
            Gets a value indicating whether this wizard has a defined cancel action.
            </summary>
            <value>
            <c>true</c> if this instance can cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.IsFinished">
            <summary>
            Gets a value indicating whether this wizard is finished.
            </summary>
            <value>
            <c>true</c> if this wizard is finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.IsStarted">
            <summary>
            Gets or sets a value indicating whether this wizard has started.
            </summary>
            <value>
            <c>true</c> if this wizard is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.EnabledSteps">
            <summary>
            Gets the enabled steps of the wizard.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Steps">
            <summary>
            Gets the steps of the wizard.
            </summary>
            <value>
            The wizard steps.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Summary">
            <summary>
            Gets the summary step of the wizard.
            </summary>
            <value>
            The summary step or null if there isn't one.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.CurrentStepId">
            <summary>
            Gets or sets the ID of the current step.
            </summary>
            <value>
            The current step ID.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardBase.Manager">
            <summary>
            Gets or sets the manager responsible for the logic of navigating 
            the wizard process.
            </summary>
            <value>
            The step manager.
            </value>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.controlClass">
            <summary>
            The field containing the value returned by ControlClass.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.hideStepListingViewStateKey">
            <summary>
            View state key for hiding the the step listing.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.includeSummaryInStepListingViewStateKey">
            <summary>
            View state key for including the summary in the step listing.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.onCancelClientClickViewStateKey">
            <summary>
            View state key for client-side code for the cancel button click event.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.onCloseClientClickViewStateKey">
            <summary>
            View state key for client-side code for the close button click event.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.separatorViewStateKey">
            <summary>
            View state key for storing/retrieving the separator
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard"/> class.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.CanGo(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView)">
            <summary>
            Determines whether the wizard can go the specified step.
            </summary>
            <param name="step">The step.</param>
            <returns>
            <c>true</c> if this instance can go the specified step; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.CausesValidation(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStepView)">
            <summary>
            Determines whether going to the specified step causes validation.
            </summary>
            <param name="step">The step.</param>
            <returns>True if going to the step would cause validation; otherwise false.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.OnInit(System.EventArgs)">
            <summary>
            Loads the template user control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ControlClass">
            <summary>
            Gets the control class or classes.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.HideStepListing">
            <summary>
            Gets or sets a value indicating whether to hide or show the list of 
            names and links to the steps of the wizard. Without this, the 
            wizard doesn't provide the user with context for the step they are 
            executing. 
            </summary>
            <value>
            <c>true</c> if hiding the step listing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.IncludeSummaryInStepListing">
            <summary>
            <para>Gets or sets a value indicating whether to include the post-finish 
            summary step in the list of all steps.</para>
            <para>A user can never skip directly to this step.</para>
            </summary>
            <value>
            <c>true</c> when including the summary in the step listing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.OnCancelClientClick">
            <summary>
            Gets or sets the on client-side code to execute when the user 
            clicks the cancel button. If this code returns false, it will stop 
            the execution of the button click. This is analogous to the 
            OnClientClick property of the ASP.Net Button. 
            </summary>
            <value>
            Client-side code that may return false to cancel the button click (do not return true to continue).
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.OnCloseClientClick">
            <summary>
            Gets or sets the on client-side code to execute when the user 
            clicks the close button. If this code returns false, it will stop 
            the execution of the button click. This is analogous to the 
            OnClientClick property of the ASP.Net Button. 
            </summary>
            <value>
            Client-side code that may return false to cancel the button click (do not return true to continue).
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.Separator">
            <summary>
            Gets or sets the character or string that separates a step's status 
            from its name in the step list. 
            </summary>
            <value>
            The separator character or string.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowCancel">
            <summary>
            Gets a value indicating whether to show the cancel button.
            </summary>
            <value>
              <c>true</c> if to show the cancel button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowClose">
            <summary>
            Gets a value indicating whether to show the close button.
            </summary>
            <value>
              <c>true</c> if to show the close button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowFinish">
            <summary>
            Gets a value indicating whether to show the finish button.
            </summary>
            <value>
            <c>true</c> if to show the finish button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowNext">
            <summary>
            Gets a value indicating whether to show the next button.
            </summary>
            <value>
              <c>true</c> if to show the next button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowPrevious">
            <summary>
            Gets a value indicating whether to show the previous button.
            </summary>
            <value>
              <c>true</c> if to show the previous button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ShowStart">
            <summary>
            Gets a value indicating whether to show the start button.
            </summary>
            <value>
              <c>true</c> if to show the next button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.StepListing">
            <summary>
            Gets the steps for the step listing.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Wizard.ToolTip">
            <summary>
            <para>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</para>
            <para>This is passed to the base control, but doesn't have any particular meaning for the Wizard.</para>
            </summary>
            <returns>The text displayed when the mouse pointer hovers over the Web server control. The default is <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardCompleteEventArgs">
            <summary>
            Permits a completion step in a wizard to indicate a failure
            that should cancel the process.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardCompleteEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the completion 
            process.
            </summary>
            <value>
            <c>true</c> to cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList">
            <summary>
            An ordered collection of IWizardStep instances with unique IDs.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.stepsById">
            <summary>
            Internal reference to steps by their ID to enforce uniqueness.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList"/> class
            without any steps.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.#ctor(System.Collections.Generic.IEnumerable{Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep})">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList"/> class.
            </summary>
            <param name="steps">The steps to contain.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">An item in <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Two items have the same ID .</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.GetEnabledSteps">
            <summary>
            Gets the enabled steps.
            </summary>
            <returns>The list of enabled steps or an empty list.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.GetFollowingStep(System.String,System.Boolean)">
            <summary>
            Gets the step following the one specified.
            </summary>
            <param name="id">The ID of the step before the one to return.</param>
            <param name="enabledOnly">if set to <c>true</c> consider enabled steps only.</param>
            <returns>The subsequent step in the list or null.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.GetPrecedingStep(System.String,System.Boolean)">
            <summary>
            Gets the step preceding the one specified.
            </summary>
            <param name="id">The ID of the step after the one to return.</param>
            <param name="enabledOnly">if set to <c>true</c> consider enabled steps only.</param>
            <returns>The previous step in the list or null.</returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1"/>.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.InsertItem(System.Int32,Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep)">
            <summary>
            Inserts an element into the<see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An item with the same ID already exists.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1.Count"/>.
            </exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.SetItem(System.Int32,Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.WizardStepList`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Another item with the same ID already exists.</exception>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList.Item(System.String)">
            <summary>
            Gets the IWizardStep with the specified ID.
            </summary>
            <param name="id">The ID of the step to retrieve.</param>
            <returns>The IWizardStep with the specified ID (when added).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A step with <paramref name="id"/> has not been added.</exception>
        </member>
        <member name="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager">
            <summary>
            Implements the logic of navigating a wizard process, by managing a step
            as "current" among a WizardStepList and a final summary step.
            </summary>
        </member>
        <member name="F:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.currentStep">
            <summary>
            The internal reference to the current step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(System.Collections.Generic.IEnumerable{Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep})">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            converting the step list into a WizardStepList.
            </summary>
            <param name="steps">The steps to manage.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">An item in <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Two items in steps have the same ID .</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            without a summary step and with the first step as current.
            </summary>
            <param name="steps">The steps to manage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there are no enabled steps.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(System.Collections.Generic.IEnumerable{Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            converting the step list into a WizardStepList.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="currentStepId">The ID of the current step in the wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">An item in <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Two items in steps have the same ID .</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            without a summary step.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="currentStepId">The ID of the current step in the wizard.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if no enabled step matches currentStepId.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(System.Collections.Generic.IEnumerable{Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep},Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            converting the step list into a WizardStepList.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="summary">The summary step after <paramref name="steps"/> have completed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">An item in <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Two items in steps have the same ID .</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList,Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            with the first step as current.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="summary">The summary step after <paramref name="steps"/> have completed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there are no enabled steps.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(System.Collections.Generic.IEnumerable{Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep},Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class
            converting the step list into a WizardStepList.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="summary">The summary step after <paramref name="steps"/> have completed.</param>
            <param name="currentStepId">The ID of the current step in the wizard.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">An item in <paramref name="steps"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Two items in steps have the same ID .</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.#ctor(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepList,Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager"/> class.
            </summary>
            <param name="steps">The steps to manage.</param>
            <param name="summary">The summary step after <paramref name="steps"/> have completed.</param>
            <param name="currentStepId">The ID of the current step in the wizard.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if no enabled step matches currentStepId.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Activate">
            <summary>
            Activates the wizard.  Raises the start event and activates the
            current step.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Advance">
            <summary>
            Advances the current step to the following step, completing the 
            current step and activating the following step in the process.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Complete">
            <summary>
            Completes the wizard, proceeding to the final enabled step and
            raising the events to finish the final step and the overall wizard.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown if all steps are disabled.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Go(System.String)">
            <summary>
            Advances or returns repeatedly to the step with the specified ID.
            </summary>
            <param name="stepId">The step ID.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if there is no step with the specified ID.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.IsAfterCurrentStep(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.IWizardStep)">
            <summary>
            Determines whether the specified step is after current step.
            </summary>
            <param name="step">The step to check.</param>
            <returns>
              <c>true</c> if the specified step is after current step; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Return">
            <summary>
            Return the current step to the preceding step, activating it in the process.
            </summary>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.InitializeCurrentStep(System.String)">
            <summary>
            Sets the current step.  If the step specified is disabled, the 
            nearest non-disabled step found is marked as current -- search is
            conducted backwards and then forwards.
            </summary>
            <param name="id">The ID of the step to make current or null for the
            first step.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if there is no step with the given ID.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if no enabled step matches the ID.</exception>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.OnCurrentStepChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:CurrentStepChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.OnFinish(Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardCompleteEventArgs)">
            <summary>
            Raises the <see cref="E:Finish"/> event.
            </summary>
            <param name="e">The <see cref="T:Ektron.Cms.Framework.UI.Controls.EktronUI.WizardCompleteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.OnStart(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Start"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.CurrentStepChanged">
            <summary>
            Occurs when the current step is changed.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Start">
            <summary>
            Occurs when the wizard first starts after the steps are
            loaded and a tentative current step is set, but before 
            the current step has been activated.
            </summary>
        </member>
        <member name="E:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Finish">
            <summary>
            Occurs when the wizard finishes.
            </summary>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.CurrentStep">
            <summary>
            Gets or sets the current step.
            </summary>
            <value>
            The current step.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown when setting to null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting to an IWizardStep that is not SummaryStep or in Steps.</exception>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.CurrentStepIsFinish">
            <summary>
            Gets a value indicating whether the current step is the finish step.
            </summary>
            <value>
            <c>true</c> if the current step is the finishing step; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.CurrentStepIsStart">
            <summary>
            Gets a value indicating whether the current step is the start step.
            </summary>
            <value>
            <c>true</c> if the current step is the starting step; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.IsFinished">
            <summary>
            Gets or sets a value indicating whether the wizard is finished.
            </summary>
            <value>
            <c>true</c> if the wizard is finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.Steps">
            <summary>
            Gets or sets the steps to manage in the wizard process.
            </summary>
            <value>
            The steps to manage.
            </value>
        </member>
        <member name="P:Ektron.Cms.Framework.UI.Controls.EktronUI.Widgets.Wizard.WizardStepManager.SummaryStep">
            <summary>
            Gets or sets the summary step to display when the wizard is 
            finished..
            </summary>
            <value>
            The summary step or null to remain on the last step.
            </value>
        </member>
    </members>
</doc>
